// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `InnerModelManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <InnerModelManager.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompInnerModelManager__InnerModelManager__addTransform_name = "addTransform";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__addJoint_name = "addJoint";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__addMesh_name = "addMesh";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__addPlane_name = "addPlane";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name = "getAllNodeInformation";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setPose_name = "setPose";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name = "setPoseFromParent";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__getPose_name = "getPose";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name = "getPoseFromParent";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setPlane_name = "setPlane";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name = "setPlaneTexture";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__transform_name = "transform";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name = "getTransformationMatrix";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setScale_name = "setScale";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__addAttribute_name = "addAttribute";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__removeAttribute_name = "removeAttribute";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setAttribute_name = "setAttribute";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__getAttribute_name = "getAttribute";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__removeNode_name = "removeNode";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__moveNode_name = "moveNode";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__collide_name = "collide";

const ::std::string __RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name = "setPointCloudData";

}

namespace
{

const char* __RoboCompInnerModelManager__InnerModelManagerError_name = "RoboCompInnerModelManager::InnerModelManagerError";

struct __F__RoboCompInnerModelManager__InnerModelManagerError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompInnerModelManager::InnerModelManagerError();
    }
};

class __F__RoboCompInnerModelManager__InnerModelManagerError__Init
{
public:

    __F__RoboCompInnerModelManager__InnerModelManagerError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompInnerModelManager::InnerModelManagerError", new __F__RoboCompInnerModelManager__InnerModelManagerError);
    }

    ~__F__RoboCompInnerModelManager__InnerModelManagerError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompInnerModelManager::InnerModelManagerError");
    }
};

const __F__RoboCompInnerModelManager__InnerModelManagerError__Init __F__RoboCompInnerModelManager__InnerModelManagerError__i;

}

RoboCompInnerModelManager::InnerModelManagerError::InnerModelManagerError(::RoboCompInnerModelManager::ErrorType __ice_err, const ::std::string& __ice_text) :
    ::Ice::UserException(),
    err(__ice_err),
    text(__ice_text)
{
}

RoboCompInnerModelManager::InnerModelManagerError::~InnerModelManagerError() throw()
{
}

::std::string
RoboCompInnerModelManager::InnerModelManagerError::ice_name() const
{
    return __RoboCompInnerModelManager__InnerModelManagerError_name;
}

RoboCompInnerModelManager::InnerModelManagerError*
RoboCompInnerModelManager::InnerModelManagerError::ice_clone() const
{
    return new InnerModelManagerError(*this);
}

void
RoboCompInnerModelManager::InnerModelManagerError::ice_throw() const
{
    throw *this;
}

void
RoboCompInnerModelManager::InnerModelManagerError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompInnerModelManager::InnerModelManagerError", -1, true);
    __os->write(err);
    __os->write(text);
    __os->endWriteSlice();
}

void
RoboCompInnerModelManager::InnerModelManagerError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(err);
    __is->read(text);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompInnerModelManager::upCast(::IceProxy::RoboCompInnerModelManager::InnerModelManager* p) { return p; }

void
::IceProxy::RoboCompInnerModelManager::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompInnerModelManager::InnerModelManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompInnerModelManager::InnerModelManager;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__addTransform_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addTransform_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->addTransform(item, engine, base, pose, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addTransform_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__addTransform_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__addTransform_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(engine);
        __os->write(base);
        __os->write(pose);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addTransform(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__addTransform_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__addJoint_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addJoint_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->addJoint(item, base, j, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addJoint_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__addJoint_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__addJoint_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(base);
        __os->write(j);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addJoint(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__addJoint_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__addMesh_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addMesh_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->addMesh(item, base, m, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addMesh_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__addMesh_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__addMesh_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(base);
        __os->write(m);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addMesh(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__addMesh_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__addPlane_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addPlane_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->addPlane(item, base, plane, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addPlane_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__addPlane_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__addPlane_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(base);
        __os->write(plane);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addPlane(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__addPlane_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompInnerModelManager::InnerModelManager::getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            __del->getAllNodeInformation(nodesInfo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_getAllNodeInformation(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(nodesInfo);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setPose_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPose_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->setPose(base, item, pose, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPose_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setPose_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setPose_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __os->write(pose);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPose(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__setPose_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->setPoseFromParent(item, pose, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(pose);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPoseFromParent(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::getPose(const ::std::string& base, const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__getPose_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getPose_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->getPose(base, item, pose, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getPose_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__getPose_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__getPose_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getPose(::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__getPose_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(pose);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::getPoseFromParent(const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->getPoseFromParent(item, pose, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getPoseFromParent(::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(pose);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setPlane_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPlane_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->setPlane(item, plane, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPlane_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setPlane_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setPlane_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(plane);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPlane(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__setPlane_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->setPlaneTexture(item, texure, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(texure);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPlaneTexture(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, ::RoboCompInnerModelManager::coord3D& coordInBase, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__transform_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__transform_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->transform(base, item, coordInItem, coordInBase, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__transform_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__transform_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__transform_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __os->write(coordInItem);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_transform(::RoboCompInnerModelManager::coord3D& coordInBase, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__transform_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(coordInBase);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompInnerModelManager::Matrix
IceProxy::RoboCompInnerModelManager::InnerModelManager::getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->getTransformationMatrix(base, item, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompInnerModelManager::Matrix
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getTransformationMatrix(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name);
    ::RoboCompInnerModelManager::Matrix __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setScale_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setScale_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->setScale(item, scaleX, scaleY, scaleZ, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setScale_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setScale_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setScale_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(scaleX);
        __os->write(scaleY);
        __os->write(scaleZ);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setScale(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__setScale_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__addAttribute_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addAttribute_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->addAttribute(idNode, name, type, value, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__addAttribute_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__addAttribute_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__addAttribute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __os->write(type);
        __os->write(value);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addAttribute(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__addAttribute_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__removeAttribute_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__removeAttribute_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->removeAttribute(idNode, name, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__removeAttribute_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__removeAttribute_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__removeAttribute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_removeAttribute(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__removeAttribute_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setAttribute_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setAttribute_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->setAttribute(idNode, name, type, value, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__setAttribute_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setAttribute_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setAttribute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __os->write(type);
        __os->write(value);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setAttribute(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__setAttribute_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::getAttribute(const ::std::string& idNode, const ::std::string& name, ::std::string& type, ::std::string& value, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__getAttribute_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getAttribute_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->getAttribute(idNode, name, type, value, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__getAttribute_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__getAttribute_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__getAttribute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getAttribute(::std::string& type, ::std::string& value, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__getAttribute_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(type);
        __is->read(value);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::removeNode(const ::std::string& item, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__removeNode_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__removeNode_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->removeNode(item, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_removeNode(const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__removeNode_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__removeNode_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__removeNode_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_removeNode(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__removeNode_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__moveNode_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__moveNode_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->moveNode(src, dst, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__moveNode_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__moveNode_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__moveNode_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(src);
        __os->write(dst);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_moveNode(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__moveNode_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__collide_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__collide_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            return __del->collide(a, b, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompInnerModelManager__InnerModelManager__collide_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__collide_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__collide_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(a);
        __os->write(b);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_collide(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompInnerModelManager__InnerModelManager__collide_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompInnerModelManager::InnerModelManager::setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompInnerModelManager::InnerModelManager* __del = dynamic_cast< ::IceDelegate::RoboCompInnerModelManager::InnerModelManager*>(__delBase.get());
            __del->setPointCloudData(id, cloud, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(id);
        __os->write(cloud);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPointCloudData(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name);
}

const ::std::string&
IceProxy::RoboCompInnerModelManager::InnerModelManager::ice_staticId()
{
    return ::RoboCompInnerModelManager::InnerModelManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompInnerModelManager::InnerModelManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompInnerModelManager::InnerModelManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompInnerModelManager::InnerModelManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompInnerModelManager::InnerModelManager);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompInnerModelManager::InnerModelManager::__newInstance() const
{
    return new InnerModelManager;
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__addTransform_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(engine);
        __os->write(base);
        __os->write(pose);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__addJoint_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(base);
        __os->write(j);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__addMesh_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(base);
        __os->write(m);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__addPlane_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(base);
        __os->write(plane);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(nodesInfo);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setPose_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __os->write(pose);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(pose);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::getPose(const ::std::string& base, const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__getPose_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(pose);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::getPoseFromParent(const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(pose);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setPlane_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(plane);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(texure);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, ::RoboCompInnerModelManager::coord3D& coordInBase, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__transform_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __os->write(coordInItem);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(coordInBase);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompInnerModelManager::Matrix
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(base);
        __os->write(item);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompInnerModelManager::Matrix __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setScale_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __os->write(scaleX);
        __os->write(scaleY);
        __os->write(scaleZ);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__addAttribute_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __os->write(type);
        __os->write(value);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__removeAttribute_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setAttribute_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __os->write(type);
        __os->write(value);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::getAttribute(const ::std::string& idNode, const ::std::string& name, ::std::string& type, ::std::string& value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__getAttribute_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(idNode);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(type);
        __is->read(value);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::removeNode(const ::std::string& item, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__removeNode_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(item);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__moveNode_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(src);
        __os->write(dst);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__collide_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(a);
        __os->write(b);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompInnerModelManager::InnerModelManager::setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(id);
        __os->write(cloud);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::std::string& __p_engine, const ::std::string& __p_base, const ::RoboCompInnerModelManager::Pose3D& __p_pose, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_engine(__p_engine),
            _m_base(__p_base),
            _m_pose(__p_pose)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->addTransform(_m_item, _m_engine, _m_base, _m_pose, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::std::string& _m_engine;
        const ::std::string& _m_base;
        const ::RoboCompInnerModelManager::Pose3D& _m_pose;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__addTransform_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, engine, base, pose, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::std::string& __p_base, const ::RoboCompInnerModelManager::jointType& __p_j, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_base(__p_base),
            _m_j(__p_j)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->addJoint(_m_item, _m_base, _m_j, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::std::string& _m_base;
        const ::RoboCompInnerModelManager::jointType& _m_j;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__addJoint_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, base, j, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::std::string& __p_base, const ::RoboCompInnerModelManager::meshType& __p_m, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_base(__p_base),
            _m_m(__p_m)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->addMesh(_m_item, _m_base, _m_m, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::std::string& _m_base;
        const ::RoboCompInnerModelManager::meshType& _m_m;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__addMesh_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, base, m, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::std::string& __p_base, const ::RoboCompInnerModelManager::Plane3D& __p_plane, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_base(__p_base),
            _m_plane(__p_plane)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->addPlane(_m_item, _m_base, _m_plane, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::std::string& _m_base;
        const ::RoboCompInnerModelManager::Plane3D& _m_plane;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__addPlane_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, base, plane, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompInnerModelManager::NodeInformationSequence& __p_nodesInfo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_nodesInfo(__p_nodesInfo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getAllNodeInformation(_m_nodesInfo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompInnerModelManager::NodeInformationSequence& _m_nodesInfo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__getAllNodeInformation_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(nodesInfo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_base, const ::std::string& __p_item, const ::RoboCompInnerModelManager::Pose3D& __p_pose, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_base(__p_base),
            _m_item(__p_item),
            _m_pose(__p_pose)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setPose(_m_base, _m_item, _m_pose, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_base;
        const ::std::string& _m_item;
        const ::RoboCompInnerModelManager::Pose3D& _m_pose;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setPose_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, base, item, pose, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::RoboCompInnerModelManager::Pose3D& __p_pose, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_pose(__p_pose)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setPoseFromParent(_m_item, _m_pose, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::RoboCompInnerModelManager::Pose3D& _m_pose;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setPoseFromParent_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, pose, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::getPose(const ::std::string& base, const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_base, const ::std::string& __p_item, ::RoboCompInnerModelManager::Pose3D& __p_pose, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_base(__p_base),
            _m_item(__p_item),
            _m_pose(__p_pose)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getPose(_m_base, _m_item, _m_pose, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_base;
        const ::std::string& _m_item;
        ::RoboCompInnerModelManager::Pose3D& _m_pose;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__getPose_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, base, item, pose, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::getPoseFromParent(const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, ::RoboCompInnerModelManager::Pose3D& __p_pose, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_pose(__p_pose)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getPoseFromParent(_m_item, _m_pose, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        ::RoboCompInnerModelManager::Pose3D& _m_pose;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__getPoseFromParent_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, pose, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::RoboCompInnerModelManager::Plane3D& __p_plane, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_plane(__p_plane)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setPlane(_m_item, _m_plane, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::RoboCompInnerModelManager::Plane3D& _m_plane;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setPlane_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, plane, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::std::string& __p_texure, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_texure(__p_texure)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setPlaneTexture(_m_item, _m_texure, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        const ::std::string& _m_texure;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setPlaneTexture_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, texure, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, ::RoboCompInnerModelManager::coord3D& coordInBase, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_base, const ::std::string& __p_item, const ::RoboCompInnerModelManager::coord3D& __p_coordInItem, ::RoboCompInnerModelManager::coord3D& __p_coordInBase, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_base(__p_base),
            _m_item(__p_item),
            _m_coordInItem(__p_coordInItem),
            _m_coordInBase(__p_coordInBase)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->transform(_m_base, _m_item, _m_coordInItem, _m_coordInBase, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_base;
        const ::std::string& _m_item;
        const ::RoboCompInnerModelManager::coord3D& _m_coordInItem;
        ::RoboCompInnerModelManager::coord3D& _m_coordInBase;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__transform_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, base, item, coordInItem, coordInBase, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompInnerModelManager::Matrix
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompInnerModelManager::Matrix& __result, const ::std::string& __p_base, const ::std::string& __p_item, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_base(__p_base),
            _m_item(__p_item)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getTransformationMatrix(_m_base, _m_item, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompInnerModelManager::Matrix& _result;
        const ::std::string& _m_base;
        const ::std::string& _m_item;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__getTransformationMatrix_name, ::Ice::Normal, __context);
    ::RoboCompInnerModelManager::Matrix __result;
    try
    {
        _DirectI __direct(__result, base, item, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, ::Ice::Float __p_scaleX, ::Ice::Float __p_scaleY, ::Ice::Float __p_scaleZ, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item),
            _m_scaleX(__p_scaleX),
            _m_scaleY(__p_scaleY),
            _m_scaleZ(__p_scaleZ)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setScale(_m_item, _m_scaleX, _m_scaleY, _m_scaleZ, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
        ::Ice::Float _m_scaleX;
        ::Ice::Float _m_scaleY;
        ::Ice::Float _m_scaleZ;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setScale_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, scaleX, scaleY, scaleZ, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_idNode, const ::std::string& __p_name, const ::std::string& __p_type, const ::std::string& __p_value, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_idNode(__p_idNode),
            _m_name(__p_name),
            _m_type(__p_type),
            _m_value(__p_value)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->addAttribute(_m_idNode, _m_name, _m_type, _m_value, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_idNode;
        const ::std::string& _m_name;
        const ::std::string& _m_type;
        const ::std::string& _m_value;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__addAttribute_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, idNode, name, type, value, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_idNode, const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_idNode(__p_idNode),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->removeAttribute(_m_idNode, _m_name, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_idNode;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__removeAttribute_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, idNode, name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_idNode, const ::std::string& __p_name, const ::std::string& __p_type, const ::std::string& __p_value, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_idNode(__p_idNode),
            _m_name(__p_name),
            _m_type(__p_type),
            _m_value(__p_value)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setAttribute(_m_idNode, _m_name, _m_type, _m_value, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_idNode;
        const ::std::string& _m_name;
        const ::std::string& _m_type;
        const ::std::string& _m_value;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setAttribute_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, idNode, name, type, value, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::getAttribute(const ::std::string& idNode, const ::std::string& name, ::std::string& type, ::std::string& value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_idNode, const ::std::string& __p_name, ::std::string& __p_type, ::std::string& __p_value, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_idNode(__p_idNode),
            _m_name(__p_name),
            _m_type(__p_type),
            _m_value(__p_value)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getAttribute(_m_idNode, _m_name, _m_type, _m_value, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_idNode;
        const ::std::string& _m_name;
        ::std::string& _m_type;
        ::std::string& _m_value;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__getAttribute_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, idNode, name, type, value, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::removeNode(const ::std::string& item, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_item, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_item(__p_item)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->removeNode(_m_item, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_item;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__removeNode_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, item, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_src, const ::std::string& __p_dst, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_src(__p_src),
            _m_dst(__p_dst)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->moveNode(_m_src, _m_dst, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_src;
        const ::std::string& _m_dst;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__moveNode_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, src, dst, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_a, const ::std::string& __p_b, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_a(__p_a),
            _m_b(__p_b)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->collide(_m_a, _m_b, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_a;
        const ::std::string& _m_b;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__collide_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, a, b, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompInnerModelManager::InnerModelManager::setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_id, const ::RoboCompInnerModelManager::PointCloudVector& __p_cloud, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_id(__p_id),
            _m_cloud(__p_cloud)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompInnerModelManager::InnerModelManager* servant = dynamic_cast< ::RoboCompInnerModelManager::InnerModelManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setPointCloudData(_m_id, _m_cloud, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_id;
        const ::RoboCompInnerModelManager::PointCloudVector& _m_cloud;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompInnerModelManager__InnerModelManager__setPointCloudData_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(id, cloud, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompInnerModelManager::upCast(::RoboCompInnerModelManager::InnerModelManager* p) { return p; }

namespace
{
const ::std::string __RoboCompInnerModelManager__InnerModelManager_ids[2] =
{
    "::Ice::Object",
    "::RoboCompInnerModelManager::InnerModelManager"
};

}

bool
RoboCompInnerModelManager::InnerModelManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompInnerModelManager__InnerModelManager_ids, __RoboCompInnerModelManager__InnerModelManager_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompInnerModelManager::InnerModelManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompInnerModelManager__InnerModelManager_ids[0], &__RoboCompInnerModelManager__InnerModelManager_ids[2]);
}

const ::std::string&
RoboCompInnerModelManager::InnerModelManager::ice_id(const ::Ice::Current&) const
{
    return __RoboCompInnerModelManager__InnerModelManager_ids[1];
}

const ::std::string&
RoboCompInnerModelManager::InnerModelManager::ice_staticId()
{
    return __RoboCompInnerModelManager__InnerModelManager_ids[1];
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___addTransform(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::std::string engine;
    ::std::string base;
    ::RoboCompInnerModelManager::Pose3D pose;
    __is->read(item);
    __is->read(engine);
    __is->read(base);
    __is->read(pose);
    __inS.endReadParams();
    try
    {
        bool __ret = addTransform(item, engine, base, pose, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___addJoint(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::std::string base;
    ::RoboCompInnerModelManager::jointType j;
    __is->read(item);
    __is->read(base);
    __is->read(j);
    __inS.endReadParams();
    try
    {
        bool __ret = addJoint(item, base, j, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___addMesh(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::std::string base;
    ::RoboCompInnerModelManager::meshType m;
    __is->read(item);
    __is->read(base);
    __is->read(m);
    __inS.endReadParams();
    try
    {
        bool __ret = addMesh(item, base, m, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___addPlane(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::std::string base;
    ::RoboCompInnerModelManager::Plane3D plane;
    __is->read(item);
    __is->read(base);
    __is->read(plane);
    __inS.endReadParams();
    try
    {
        bool __ret = addPlane(item, base, plane, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___getAllNodeInformation(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompInnerModelManager::NodeInformationSequence nodesInfo;
    try
    {
        getAllNodeInformation(nodesInfo, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(nodesInfo);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setPose(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string base;
    ::std::string item;
    ::RoboCompInnerModelManager::Pose3D pose;
    __is->read(base);
    __is->read(item);
    __is->read(pose);
    __inS.endReadParams();
    try
    {
        bool __ret = setPose(base, item, pose, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setPoseFromParent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::RoboCompInnerModelManager::Pose3D pose;
    __is->read(item);
    __is->read(pose);
    __inS.endReadParams();
    try
    {
        bool __ret = setPoseFromParent(item, pose, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___getPose(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string base;
    ::std::string item;
    __is->read(base);
    __is->read(item);
    __inS.endReadParams();
    ::RoboCompInnerModelManager::Pose3D pose;
    try
    {
        bool __ret = getPose(base, item, pose, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(pose);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___getPoseFromParent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    __is->read(item);
    __inS.endReadParams();
    ::RoboCompInnerModelManager::Pose3D pose;
    try
    {
        bool __ret = getPoseFromParent(item, pose, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(pose);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setPlane(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::RoboCompInnerModelManager::Plane3D plane;
    __is->read(item);
    __is->read(plane);
    __inS.endReadParams();
    try
    {
        bool __ret = setPlane(item, plane, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setPlaneTexture(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::std::string texure;
    __is->read(item);
    __is->read(texure);
    __inS.endReadParams();
    try
    {
        bool __ret = setPlaneTexture(item, texure, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___transform(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string base;
    ::std::string item;
    ::RoboCompInnerModelManager::coord3D coordInItem;
    __is->read(base);
    __is->read(item);
    __is->read(coordInItem);
    __inS.endReadParams();
    ::RoboCompInnerModelManager::coord3D coordInBase;
    try
    {
        bool __ret = transform(base, item, coordInItem, coordInBase, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(coordInBase);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___getTransformationMatrix(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string base;
    ::std::string item;
    __is->read(base);
    __is->read(item);
    __inS.endReadParams();
    try
    {
        ::RoboCompInnerModelManager::Matrix __ret = getTransformationMatrix(base, item, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setScale(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    ::Ice::Float scaleX;
    ::Ice::Float scaleY;
    ::Ice::Float scaleZ;
    __is->read(item);
    __is->read(scaleX);
    __is->read(scaleY);
    __is->read(scaleZ);
    __inS.endReadParams();
    try
    {
        bool __ret = setScale(item, scaleX, scaleY, scaleZ, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___addAttribute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string idNode;
    ::std::string name;
    ::std::string type;
    ::std::string value;
    __is->read(idNode);
    __is->read(name);
    __is->read(type);
    __is->read(value);
    __inS.endReadParams();
    try
    {
        bool __ret = addAttribute(idNode, name, type, value, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___removeAttribute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string idNode;
    ::std::string name;
    __is->read(idNode);
    __is->read(name);
    __inS.endReadParams();
    try
    {
        bool __ret = removeAttribute(idNode, name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setAttribute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string idNode;
    ::std::string name;
    ::std::string type;
    ::std::string value;
    __is->read(idNode);
    __is->read(name);
    __is->read(type);
    __is->read(value);
    __inS.endReadParams();
    try
    {
        bool __ret = setAttribute(idNode, name, type, value, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___getAttribute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string idNode;
    ::std::string name;
    __is->read(idNode);
    __is->read(name);
    __inS.endReadParams();
    ::std::string type;
    ::std::string value;
    try
    {
        bool __ret = getAttribute(idNode, name, type, value, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(type);
        __os->write(value);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___removeNode(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string item;
    __is->read(item);
    __inS.endReadParams();
    try
    {
        bool __ret = removeNode(item, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___moveNode(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string src;
    ::std::string dst;
    __is->read(src);
    __is->read(dst);
    __inS.endReadParams();
    try
    {
        bool __ret = moveNode(src, dst, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___collide(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string a;
    ::std::string b;
    __is->read(a);
    __is->read(b);
    __inS.endReadParams();
    try
    {
        bool __ret = collide(a, b, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompInnerModelManager::InnerModelManagerError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::___setPointCloudData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string id;
    ::RoboCompInnerModelManager::PointCloudVector cloud;
    __is->read(id);
    __is->read(cloud);
    __inS.endReadParams();
    setPointCloudData(id, cloud, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompInnerModelManager__InnerModelManager_all[] =
{
    "addAttribute",
    "addJoint",
    "addMesh",
    "addPlane",
    "addTransform",
    "collide",
    "getAllNodeInformation",
    "getAttribute",
    "getPose",
    "getPoseFromParent",
    "getTransformationMatrix",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "moveNode",
    "removeAttribute",
    "removeNode",
    "setAttribute",
    "setPlane",
    "setPlaneTexture",
    "setPointCloudData",
    "setPose",
    "setPoseFromParent",
    "setScale",
    "transform"
};

}

::Ice::DispatchStatus
RoboCompInnerModelManager::InnerModelManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompInnerModelManager__InnerModelManager_all, __RoboCompInnerModelManager__InnerModelManager_all + 26, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompInnerModelManager__InnerModelManager_all)
    {
        case 0:
        {
            return ___addAttribute(in, current);
        }
        case 1:
        {
            return ___addJoint(in, current);
        }
        case 2:
        {
            return ___addMesh(in, current);
        }
        case 3:
        {
            return ___addPlane(in, current);
        }
        case 4:
        {
            return ___addTransform(in, current);
        }
        case 5:
        {
            return ___collide(in, current);
        }
        case 6:
        {
            return ___getAllNodeInformation(in, current);
        }
        case 7:
        {
            return ___getAttribute(in, current);
        }
        case 8:
        {
            return ___getPose(in, current);
        }
        case 9:
        {
            return ___getPoseFromParent(in, current);
        }
        case 10:
        {
            return ___getTransformationMatrix(in, current);
        }
        case 11:
        {
            return ___ice_id(in, current);
        }
        case 12:
        {
            return ___ice_ids(in, current);
        }
        case 13:
        {
            return ___ice_isA(in, current);
        }
        case 14:
        {
            return ___ice_ping(in, current);
        }
        case 15:
        {
            return ___moveNode(in, current);
        }
        case 16:
        {
            return ___removeAttribute(in, current);
        }
        case 17:
        {
            return ___removeNode(in, current);
        }
        case 18:
        {
            return ___setAttribute(in, current);
        }
        case 19:
        {
            return ___setPlane(in, current);
        }
        case 20:
        {
            return ___setPlaneTexture(in, current);
        }
        case 21:
        {
            return ___setPointCloudData(in, current);
        }
        case 22:
        {
            return ___setPose(in, current);
        }
        case 23:
        {
            return ___setPoseFromParent(in, current);
        }
        case 24:
        {
            return ___setScale(in, current);
        }
        case 25:
        {
            return ___transform(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompInnerModelManager::InnerModelManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompInnerModelManager::InnerModelManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompInnerModelManager::__patch(InnerModelManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompInnerModelManager::InnerModelManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompInnerModelManager::InnerModelManager::ice_staticId(), v);
    }
}
