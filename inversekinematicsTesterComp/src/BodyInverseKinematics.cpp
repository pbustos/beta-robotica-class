// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `BodyInverseKinematics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <BodyInverseKinematics.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name = "setTargetPose6D";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name = "pointAxisTowardsTarget";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name = "advanceAlongAxis";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name = "setFingers";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name = "goHome";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name = "setRobot";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name = "getState";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name = "stop";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name = "setNewTip";

const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name = "setJoint";

}

namespace
{

const char* __RoboCompBodyInverseKinematics__BIKException_name = "RoboCompBodyInverseKinematics::BIKException";

struct __F__RoboCompBodyInverseKinematics__BIKException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompBodyInverseKinematics::BIKException();
    }
};

class __F__RoboCompBodyInverseKinematics__BIKException__Init
{
public:

    __F__RoboCompBodyInverseKinematics__BIKException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompBodyInverseKinematics::BIKException", new __F__RoboCompBodyInverseKinematics__BIKException);
    }

    ~__F__RoboCompBodyInverseKinematics__BIKException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompBodyInverseKinematics::BIKException");
    }
};

const __F__RoboCompBodyInverseKinematics__BIKException__Init __F__RoboCompBodyInverseKinematics__BIKException__i;

}

RoboCompBodyInverseKinematics::BIKException::BIKException(const ::std::string& __ice_text) :
    ::Ice::UserException(),
    text(__ice_text)
{
}

RoboCompBodyInverseKinematics::BIKException::~BIKException() throw()
{
}

::std::string
RoboCompBodyInverseKinematics::BIKException::ice_name() const
{
    return __RoboCompBodyInverseKinematics__BIKException_name;
}

RoboCompBodyInverseKinematics::BIKException*
RoboCompBodyInverseKinematics::BIKException::ice_clone() const
{
    return new BIKException(*this);
}

void
RoboCompBodyInverseKinematics::BIKException::ice_throw() const
{
    throw *this;
}

void
RoboCompBodyInverseKinematics::BIKException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompBodyInverseKinematics::BIKException", -1, true);
    __os->write(text);
    __os->endWriteSlice();
}

void
RoboCompBodyInverseKinematics::BIKException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(text);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompBodyInverseKinematics::upCast(::IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics* p) { return p; }

void
::IceProxy::RoboCompBodyInverseKinematics::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::WeightVector& weights, ::Ice::Float radius, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->setTargetPose6D(bodyPart, target, weights, radius, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::WeightVector& weights, ::Ice::Float radius, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bodyPart);
        __os->write(target);
        __os->write(weights);
        __os->write(radius);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_setTargetPose6D(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::pointAxisTowardsTarget(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::Axis& ax, bool axisConstraint, ::Ice::Float axisAngleConstraint, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->pointAxisTowardsTarget(bodyPart, target, ax, axisConstraint, axisAngleConstraint, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_pointAxisTowardsTarget(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::Axis& ax, bool axisConstraint, ::Ice::Float axisAngleConstraint, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bodyPart);
        __os->write(target);
        __os->write(ax);
        __os->write(axisConstraint);
        __os->write(axisAngleConstraint);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_pointAxisTowardsTarget(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::advanceAlongAxis(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->advanceAlongAxis(bodyPart, ax, dist, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_advanceAlongAxis(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bodyPart);
        __os->write(ax);
        __os->write(dist);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_advanceAlongAxis(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::setFingers(::Ice::Float d, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->setFingers(d, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_setFingers(::Ice::Float d, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(d);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_setFingers(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::goHome(const ::std::string& part, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->goHome(part, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_goHome(const ::std::string& part, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_goHome(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::setRobot(::Ice::Int type, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->setRobot(type, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_setRobot(::Ice::Int type, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(type);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_setRobot(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompBodyInverseKinematics::TargetState
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::getState(const ::std::string& part, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            return __del->getState(part, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_getState(const ::std::string& part, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompBodyInverseKinematics::TargetState
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_getState(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name);
    ::RoboCompBodyInverseKinematics::TargetState __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::stop(const ::std::string& part, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->stop(part, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_stop(const ::std::string& part, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_stop(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name);
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::setNewTip(const ::std::string& part, const ::std::string& transform, const ::RoboCompBodyInverseKinematics::Pose6D& pose, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->setNewTip(part, transform, pose, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_setNewTip(const ::std::string& part, const ::std::string& transform, const ::RoboCompBodyInverseKinematics::Pose6D& pose, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __os->write(transform);
        __os->write(pose);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_setNewTip(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name);
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::setJoint(const ::std::string& joint, ::Ice::Float speed, ::Ice::Float maxSpeed, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics* __del = dynamic_cast< ::IceDelegate::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(__delBase.get());
            __del->setJoint(joint, speed, maxSpeed, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::begin_setJoint(const ::std::string& joint, ::Ice::Float speed, ::Ice::Float maxSpeed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(joint);
        __os->write(speed);
        __os->write(maxSpeed);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::end_setJoint(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name);
}

const ::std::string&
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_staticId()
{
    return ::RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompBodyInverseKinematics::BodyInverseKinematics::__newInstance() const
{
    return new BodyInverseKinematics;
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::WeightVector& weights, ::Ice::Float radius, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bodyPart);
        __os->write(target);
        __os->write(weights);
        __os->write(radius);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::pointAxisTowardsTarget(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::Axis& ax, bool axisConstraint, ::Ice::Float axisAngleConstraint, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bodyPart);
        __os->write(target);
        __os->write(ax);
        __os->write(axisConstraint);
        __os->write(axisAngleConstraint);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::advanceAlongAxis(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bodyPart);
        __os->write(ax);
        __os->write(dist);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::setFingers(::Ice::Float d, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(d);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::goHome(const ::std::string& part, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::setRobot(::Ice::Int type, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(type);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompBodyInverseKinematics::BIKException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompBodyInverseKinematics::TargetState
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::getState(const ::std::string& part, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompBodyInverseKinematics::TargetState __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::stop(const ::std::string& part, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::setNewTip(const ::std::string& part, const ::std::string& transform, const ::RoboCompBodyInverseKinematics::Pose6D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(part);
        __os->write(transform);
        __os->write(pose);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompBodyInverseKinematics::BodyInverseKinematics::setJoint(const ::std::string& joint, ::Ice::Float speed, ::Ice::Float maxSpeed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(joint);
        __os->write(speed);
        __os->write(maxSpeed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::WeightVector& weights, ::Ice::Float radius, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& __p_target, const ::RoboCompBodyInverseKinematics::WeightVector& __p_weights, ::Ice::Float __p_radius, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bodyPart(__p_bodyPart),
            _m_target(__p_target),
            _m_weights(__p_weights),
            _m_radius(__p_radius)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setTargetPose6D(_m_bodyPart, _m_target, _m_weights, _m_radius, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_bodyPart;
        const ::RoboCompBodyInverseKinematics::Pose6D& _m_target;
        const ::RoboCompBodyInverseKinematics::WeightVector& _m_weights;
        ::Ice::Float _m_radius;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setTargetPose6D_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bodyPart, target, weights, radius, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::pointAxisTowardsTarget(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& target, const ::RoboCompBodyInverseKinematics::Axis& ax, bool axisConstraint, ::Ice::Float axisAngleConstraint, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_bodyPart, const ::RoboCompBodyInverseKinematics::Pose6D& __p_target, const ::RoboCompBodyInverseKinematics::Axis& __p_ax, bool __p_axisConstraint, ::Ice::Float __p_axisAngleConstraint, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bodyPart(__p_bodyPart),
            _m_target(__p_target),
            _m_ax(__p_ax),
            _m_axisConstraint(__p_axisConstraint),
            _m_axisAngleConstraint(__p_axisAngleConstraint)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->pointAxisTowardsTarget(_m_bodyPart, _m_target, _m_ax, _m_axisConstraint, _m_axisAngleConstraint, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_bodyPart;
        const ::RoboCompBodyInverseKinematics::Pose6D& _m_target;
        const ::RoboCompBodyInverseKinematics::Axis& _m_ax;
        bool _m_axisConstraint;
        ::Ice::Float _m_axisAngleConstraint;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__pointAxisTowardsTarget_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bodyPart, target, ax, axisConstraint, axisAngleConstraint, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::advanceAlongAxis(const ::std::string& bodyPart, const ::RoboCompBodyInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_bodyPart, const ::RoboCompBodyInverseKinematics::Axis& __p_ax, ::Ice::Float __p_dist, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bodyPart(__p_bodyPart),
            _m_ax(__p_ax),
            _m_dist(__p_dist)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->advanceAlongAxis(_m_bodyPart, _m_ax, _m_dist, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_bodyPart;
        const ::RoboCompBodyInverseKinematics::Axis& _m_ax;
        ::Ice::Float _m_dist;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__advanceAlongAxis_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bodyPart, ax, dist, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::setFingers(::Ice::Float d, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float __p_d, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_d(__p_d)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setFingers(_m_d, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Float _m_d;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setFingers_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(d, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::goHome(const ::std::string& part, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_part, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_part(__p_part)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->goHome(_m_part, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_part;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__goHome_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(part, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::setRobot(::Ice::Int type, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_type, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_type(__p_type)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setRobot(_m_type, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_type;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setRobot_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(type, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::RoboCompBodyInverseKinematics::TargetState
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::getState(const ::std::string& part, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompBodyInverseKinematics::TargetState& __result, const ::std::string& __p_part, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_part(__p_part)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getState(_m_part, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompBodyInverseKinematics::TargetState& _result;
        const ::std::string& _m_part;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__getState_name, ::Ice::Normal, __context);
    ::RoboCompBodyInverseKinematics::TargetState __result;
    try
    {
        _DirectI __direct(__result, part, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::stop(const ::std::string& part, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_part, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_part(__p_part)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->stop(_m_part, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_part;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__stop_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(part, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::setNewTip(const ::std::string& part, const ::std::string& transform, const ::RoboCompBodyInverseKinematics::Pose6D& pose, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_part, const ::std::string& __p_transform, const ::RoboCompBodyInverseKinematics::Pose6D& __p_pose, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_part(__p_part),
            _m_transform(__p_transform),
            _m_pose(__p_pose)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setNewTip(_m_part, _m_transform, _m_pose, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_part;
        const ::std::string& _m_transform;
        const ::RoboCompBodyInverseKinematics::Pose6D& _m_pose;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setNewTip_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(part, transform, pose, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompBodyInverseKinematics::BodyInverseKinematics::setJoint(const ::std::string& joint, ::Ice::Float speed, ::Ice::Float maxSpeed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_joint, ::Ice::Float __p_speed, ::Ice::Float __p_maxSpeed, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_joint(__p_joint),
            _m_speed(__p_speed),
            _m_maxSpeed(__p_maxSpeed)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompBodyInverseKinematics::BodyInverseKinematics* servant = dynamic_cast< ::RoboCompBodyInverseKinematics::BodyInverseKinematics*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setJoint(_m_joint, _m_speed, _m_maxSpeed, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_joint;
        ::Ice::Float _m_speed;
        ::Ice::Float _m_maxSpeed;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompBodyInverseKinematics__BodyInverseKinematics__setJoint_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(joint, speed, maxSpeed, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompBodyInverseKinematics::upCast(::RoboCompBodyInverseKinematics::BodyInverseKinematics* p) { return p; }

namespace
{
const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics_ids[2] =
{
    "::Ice::Object",
    "::RoboCompBodyInverseKinematics::BodyInverseKinematics"
};

}

bool
RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompBodyInverseKinematics__BodyInverseKinematics_ids, __RoboCompBodyInverseKinematics__BodyInverseKinematics_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompBodyInverseKinematics__BodyInverseKinematics_ids[0], &__RoboCompBodyInverseKinematics__BodyInverseKinematics_ids[2]);
}

const ::std::string&
RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_id(const ::Ice::Current&) const
{
    return __RoboCompBodyInverseKinematics__BodyInverseKinematics_ids[1];
}

const ::std::string&
RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_staticId()
{
    return __RoboCompBodyInverseKinematics__BodyInverseKinematics_ids[1];
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___setTargetPose6D(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string bodyPart;
    ::RoboCompBodyInverseKinematics::Pose6D target;
    ::RoboCompBodyInverseKinematics::WeightVector weights;
    ::Ice::Float radius;
    __is->read(bodyPart);
    __is->read(target);
    __is->read(weights);
    __is->read(radius);
    __inS.endReadParams();
    try
    {
        setTargetPose6D(bodyPart, target, weights, radius, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___pointAxisTowardsTarget(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string bodyPart;
    ::RoboCompBodyInverseKinematics::Pose6D target;
    ::RoboCompBodyInverseKinematics::Axis ax;
    bool axisConstraint;
    ::Ice::Float axisAngleConstraint;
    __is->read(bodyPart);
    __is->read(target);
    __is->read(ax);
    __is->read(axisConstraint);
    __is->read(axisAngleConstraint);
    __inS.endReadParams();
    try
    {
        pointAxisTowardsTarget(bodyPart, target, ax, axisConstraint, axisAngleConstraint, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___advanceAlongAxis(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string bodyPart;
    ::RoboCompBodyInverseKinematics::Axis ax;
    ::Ice::Float dist;
    __is->read(bodyPart);
    __is->read(ax);
    __is->read(dist);
    __inS.endReadParams();
    try
    {
        advanceAlongAxis(bodyPart, ax, dist, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___setFingers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float d;
    __is->read(d);
    __inS.endReadParams();
    try
    {
        setFingers(d, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___goHome(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string part;
    __is->read(part);
    __inS.endReadParams();
    try
    {
        goHome(part, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___setRobot(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int type;
    __is->read(type);
    __inS.endReadParams();
    try
    {
        setRobot(type, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompBodyInverseKinematics::BIKException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___getState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string part;
    __is->read(part);
    __inS.endReadParams();
    ::RoboCompBodyInverseKinematics::TargetState __ret = getState(part, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___stop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string part;
    __is->read(part);
    __inS.endReadParams();
    stop(part, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___setNewTip(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string part;
    ::std::string transform;
    ::RoboCompBodyInverseKinematics::Pose6D pose;
    __is->read(part);
    __is->read(transform);
    __is->read(pose);
    __inS.endReadParams();
    setNewTip(part, transform, pose, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::___setJoint(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string joint;
    ::Ice::Float speed;
    ::Ice::Float maxSpeed;
    __is->read(joint);
    __is->read(speed);
    __is->read(maxSpeed);
    __inS.endReadParams();
    setJoint(joint, speed, maxSpeed, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompBodyInverseKinematics__BodyInverseKinematics_all[] =
{
    "advanceAlongAxis",
    "getState",
    "goHome",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pointAxisTowardsTarget",
    "setFingers",
    "setJoint",
    "setNewTip",
    "setRobot",
    "setTargetPose6D",
    "stop"
};

}

::Ice::DispatchStatus
RoboCompBodyInverseKinematics::BodyInverseKinematics::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompBodyInverseKinematics__BodyInverseKinematics_all, __RoboCompBodyInverseKinematics__BodyInverseKinematics_all + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompBodyInverseKinematics__BodyInverseKinematics_all)
    {
        case 0:
        {
            return ___advanceAlongAxis(in, current);
        }
        case 1:
        {
            return ___getState(in, current);
        }
        case 2:
        {
            return ___goHome(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___pointAxisTowardsTarget(in, current);
        }
        case 8:
        {
            return ___setFingers(in, current);
        }
        case 9:
        {
            return ___setJoint(in, current);
        }
        case 10:
        {
            return ___setNewTip(in, current);
        }
        case 11:
        {
            return ___setRobot(in, current);
        }
        case 12:
        {
            return ___setTargetPose6D(in, current);
        }
        case 13:
        {
            return ___stop(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompBodyInverseKinematics::BodyInverseKinematics::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompBodyInverseKinematics::BodyInverseKinematics::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompBodyInverseKinematics::__patch(BodyInverseKinematicsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompBodyInverseKinematics::BodyInverseKinematicsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompBodyInverseKinematics::BodyInverseKinematics::ice_staticId(), v);
    }
}
