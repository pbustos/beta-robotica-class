// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `InnerModelManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____InnerModelManager_h__
#define ____InnerModelManager_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompInnerModelManager
{

class InnerModelManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompInnerModelManager::InnerModelManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompInnerModelManager::InnerModelManager*);

}

}

namespace RoboCompInnerModelManager
{

class InnerModelManager;
bool operator==(const InnerModelManager&, const InnerModelManager&);
bool operator<(const InnerModelManager&, const InnerModelManager&);
::Ice::Object* upCast(::RoboCompInnerModelManager::InnerModelManager*);
typedef ::IceInternal::Handle< ::RoboCompInnerModelManager::InnerModelManager> InnerModelManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompInnerModelManager::InnerModelManager> InnerModelManagerPrx;
void __patch(InnerModelManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompInnerModelManager
{

enum NodeType
{
    Transform,
    Joint,
    DifferentialRobot,
    OmniRobot,
    Plane,
    Camera,
    RGBD,
    IMU,
    Laser,
    Mesh,
    PointCloud,
    TouchSensor
};

struct AttributeType
{
    ::std::string type;
    ::std::string value;

    bool operator==(const AttributeType& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AttributeType& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AttributeType& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AttributeType& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AttributeType& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AttributeType& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RoboCompInnerModelManager::AttributeType> AttributeMap;

struct NodeInformation
{
    ::std::string id;
    ::std::string parentId;
    ::RoboCompInnerModelManager::NodeType nType;
    ::RoboCompInnerModelManager::AttributeMap attributes;
};

typedef ::std::vector< ::RoboCompInnerModelManager::NodeInformation> NodeInformationSequence;

enum ErrorType
{
    NonExistingNode,
    NonExistingAttribute,
    NodeAlreadyExists,
    AttributeAlreadyExists,
    InvalidPath,
    InvalidEngine,
    InvalidValues,
    OperationInvalidNode,
    InternalError,
    Collision
};

class InnerModelManagerError : public ::Ice::UserException
{
public:

    InnerModelManagerError() {}
    InnerModelManagerError(::RoboCompInnerModelManager::ErrorType, const ::std::string&);
    virtual ~InnerModelManagerError() throw();

    virtual ::std::string ice_name() const;
    virtual InnerModelManagerError* ice_clone() const;
    virtual void ice_throw() const;

    ::RoboCompInnerModelManager::ErrorType err;
    ::std::string text;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static InnerModelManagerError __InnerModelManagerError_init;

struct Colored3DPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;
};

typedef ::std::vector< ::RoboCompInnerModelManager::Colored3DPoint> PointCloudVector;

struct Plane3D
{
    ::Ice::Float px;
    ::Ice::Float py;
    ::Ice::Float pz;
    ::Ice::Float nx;
    ::Ice::Float ny;
    ::Ice::Float nz;
    ::Ice::Float width;
    ::Ice::Float height;
    ::Ice::Float thickness;
    ::std::string texture;
};

struct coord3D
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

struct Pose3D
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
};

struct jointType
{
    ::RoboCompInnerModelManager::Pose3D pose;
    ::Ice::Float lx;
    ::Ice::Float ly;
    ::Ice::Float lz;
    ::Ice::Float hx;
    ::Ice::Float hy;
    ::Ice::Float hz;
    ::Ice::Float mass;
    ::Ice::Float min;
    ::Ice::Float max;
    ::std::string axis;
    ::Ice::Int port;
};

struct meshType
{
    ::RoboCompInnerModelManager::Pose3D pose;
    ::Ice::Float scaleX;
    ::Ice::Float scaleY;
    ::Ice::Float scaleZ;
    ::Ice::Int render;
    ::std::string meshPath;
};

typedef ::std::vector< ::Ice::Float> FloatSeq;

struct Matrix
{
    ::Ice::Int cols;
    ::Ice::Int rows;
    ::RoboCompInnerModelManager::FloatSeq data;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompInnerModelManager::NodeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 11;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::AttributeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::AttributeType, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::AttributeType& v)
    {
        __os->write(v.type);
        __os->write(v.value);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::AttributeType, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::AttributeType& v)
    {
        __is->read(v.type);
        __is->read(v.value);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::NodeInformation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::NodeInformation, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::NodeInformation& v)
    {
        __os->write(v.id);
        __os->write(v.parentId);
        __os->write(v.nType);
        __os->write(v.attributes);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::NodeInformation, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::NodeInformation& v)
    {
        __is->read(v.id);
        __is->read(v.parentId);
        __is->read(v.nType);
        __is->read(v.attributes);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::ErrorType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 9;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::InnerModelManagerError>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::Colored3DPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::Colored3DPoint, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::Colored3DPoint& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.r);
        __os->write(v.g);
        __os->write(v.b);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::Colored3DPoint, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::Colored3DPoint& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.r);
        __is->read(v.g);
        __is->read(v.b);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::Plane3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 37;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::Plane3D, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::Plane3D& v)
    {
        __os->write(v.px);
        __os->write(v.py);
        __os->write(v.pz);
        __os->write(v.nx);
        __os->write(v.ny);
        __os->write(v.nz);
        __os->write(v.width);
        __os->write(v.height);
        __os->write(v.thickness);
        __os->write(v.texture);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::Plane3D, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::Plane3D& v)
    {
        __is->read(v.px);
        __is->read(v.py);
        __is->read(v.pz);
        __is->read(v.nx);
        __is->read(v.ny);
        __is->read(v.nz);
        __is->read(v.width);
        __is->read(v.height);
        __is->read(v.thickness);
        __is->read(v.texture);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::coord3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::coord3D, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::coord3D& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::coord3D, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::coord3D& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::Pose3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::Pose3D, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::Pose3D& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.rx);
        __os->write(v.ry);
        __os->write(v.rz);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::Pose3D, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::Pose3D& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.rx);
        __is->read(v.ry);
        __is->read(v.rz);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::jointType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 65;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::jointType, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::jointType& v)
    {
        __os->write(v.pose);
        __os->write(v.lx);
        __os->write(v.ly);
        __os->write(v.lz);
        __os->write(v.hx);
        __os->write(v.hy);
        __os->write(v.hz);
        __os->write(v.mass);
        __os->write(v.min);
        __os->write(v.max);
        __os->write(v.axis);
        __os->write(v.port);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::jointType, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::jointType& v)
    {
        __is->read(v.pose);
        __is->read(v.lx);
        __is->read(v.ly);
        __is->read(v.lz);
        __is->read(v.hx);
        __is->read(v.hy);
        __is->read(v.hz);
        __is->read(v.mass);
        __is->read(v.min);
        __is->read(v.max);
        __is->read(v.axis);
        __is->read(v.port);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::meshType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 41;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::meshType, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::meshType& v)
    {
        __os->write(v.pose);
        __os->write(v.scaleX);
        __os->write(v.scaleY);
        __os->write(v.scaleZ);
        __os->write(v.render);
        __os->write(v.meshPath);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::meshType, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::meshType& v)
    {
        __is->read(v.pose);
        __is->read(v.scaleX);
        __is->read(v.scaleY);
        __is->read(v.scaleZ);
        __is->read(v.render);
        __is->read(v.meshPath);
    }
};

template<>
struct StreamableTraits< ::RoboCompInnerModelManager::Matrix>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInnerModelManager::Matrix, S>
{
    static void write(S* __os, const ::RoboCompInnerModelManager::Matrix& v)
    {
        __os->write(v.cols);
        __os->write(v.rows);
        __os->write(v.data);
    }
};

template<class S>
struct StreamReader< ::RoboCompInnerModelManager::Matrix, S>
{
    static void read(S* __is, ::RoboCompInnerModelManager::Matrix& v)
    {
        __is->read(v.cols);
        __is->read(v.rows);
        __is->read(v.data);
    }
};

}

namespace RoboCompInnerModelManager
{

class Callback_InnerModelManager_addTransform_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_addTransform_Base> Callback_InnerModelManager_addTransformPtr;

class Callback_InnerModelManager_addJoint_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_addJoint_Base> Callback_InnerModelManager_addJointPtr;

class Callback_InnerModelManager_addMesh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_addMesh_Base> Callback_InnerModelManager_addMeshPtr;

class Callback_InnerModelManager_addPlane_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_addPlane_Base> Callback_InnerModelManager_addPlanePtr;

class Callback_InnerModelManager_getAllNodeInformation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_getAllNodeInformation_Base> Callback_InnerModelManager_getAllNodeInformationPtr;

class Callback_InnerModelManager_setPose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setPose_Base> Callback_InnerModelManager_setPosePtr;

class Callback_InnerModelManager_setPoseFromParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setPoseFromParent_Base> Callback_InnerModelManager_setPoseFromParentPtr;

class Callback_InnerModelManager_getPose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_getPose_Base> Callback_InnerModelManager_getPosePtr;

class Callback_InnerModelManager_getPoseFromParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_getPoseFromParent_Base> Callback_InnerModelManager_getPoseFromParentPtr;

class Callback_InnerModelManager_setPlane_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setPlane_Base> Callback_InnerModelManager_setPlanePtr;

class Callback_InnerModelManager_setPlaneTexture_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setPlaneTexture_Base> Callback_InnerModelManager_setPlaneTexturePtr;

class Callback_InnerModelManager_transform_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_transform_Base> Callback_InnerModelManager_transformPtr;

class Callback_InnerModelManager_getTransformationMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_getTransformationMatrix_Base> Callback_InnerModelManager_getTransformationMatrixPtr;

class Callback_InnerModelManager_setScale_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setScale_Base> Callback_InnerModelManager_setScalePtr;

class Callback_InnerModelManager_addAttribute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_addAttribute_Base> Callback_InnerModelManager_addAttributePtr;

class Callback_InnerModelManager_removeAttribute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_removeAttribute_Base> Callback_InnerModelManager_removeAttributePtr;

class Callback_InnerModelManager_setAttribute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setAttribute_Base> Callback_InnerModelManager_setAttributePtr;

class Callback_InnerModelManager_getAttribute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_getAttribute_Base> Callback_InnerModelManager_getAttributePtr;

class Callback_InnerModelManager_removeNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_removeNode_Base> Callback_InnerModelManager_removeNodePtr;

class Callback_InnerModelManager_moveNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_moveNode_Base> Callback_InnerModelManager_moveNodePtr;

class Callback_InnerModelManager_collide_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_collide_Base> Callback_InnerModelManager_collidePtr;

class Callback_InnerModelManager_setPointCloudData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InnerModelManager_setPointCloudData_Base> Callback_InnerModelManager_setPointCloudDataPtr;

}

namespace IceProxy
{

namespace RoboCompInnerModelManager
{

class InnerModelManager : virtual public ::IceProxy::Ice::Object
{
public:

    bool addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return addTransform(item, engine, base, pose, 0);
    }
    bool addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return addTransform(item, engine, base, pose, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addTransform(item, engine, base, pose, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addTransform(item, engine, base, pose, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addTransform(item, engine, base, pose, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addTransform(item, engine, base, pose, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_addTransform(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_addTransform(item, engine, base, pose, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return begin_addTransform(item, engine, base, pose, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return begin_addTransform(item, engine, base, pose, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addTransform(item, engine, base, pose, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addTransform(item, engine, base, pose, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addTransformPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addTransform(item, engine, base, pose, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string& item, const ::std::string& engine, const ::std::string& base, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addTransformPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addTransform(item, engine, base, pose, &__ctx, __del, __cookie);
    }

    bool end_addTransform(const ::Ice::AsyncResultPtr&);
    
private:

    bool addTransform(const ::std::string&, const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addTransform(const ::std::string&, const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j)
    {
        return addJoint(item, base, j, 0);
    }
    bool addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context& __ctx)
    {
        return addJoint(item, base, j, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addJoint(item, base, j, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addJoint(item, base, j, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addJoint(item, base, j, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addJoint(item, base, j, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_addJoint(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_addJoint(item, base, j, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j)
    {
        return begin_addJoint(item, base, j, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context& __ctx)
    {
        return begin_addJoint(item, base, j, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJoint(item, base, j, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJoint(item, base, j, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addJointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJoint(item, base, j, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::jointType& j, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addJointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addJoint(item, base, j, &__ctx, __del, __cookie);
    }

    bool end_addJoint(const ::Ice::AsyncResultPtr&);
    
private:

    bool addJoint(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::jointType&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addJoint(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::jointType&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m)
    {
        return addMesh(item, base, m, 0);
    }
    bool addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context& __ctx)
    {
        return addMesh(item, base, m, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addMesh(item, base, m, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addMesh(item, base, m, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addMesh(item, base, m, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addMesh(item, base, m, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_addMesh(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_addMesh(item, base, m, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m)
    {
        return begin_addMesh(item, base, m, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context& __ctx)
    {
        return begin_addMesh(item, base, m, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMesh(item, base, m, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMesh(item, base, m, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addMeshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMesh(item, base, m, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::meshType& m, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addMeshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMesh(item, base, m, &__ctx, __del, __cookie);
    }

    bool end_addMesh(const ::Ice::AsyncResultPtr&);
    
private:

    bool addMesh(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::meshType&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addMesh(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::meshType&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane)
    {
        return addPlane(item, base, plane, 0);
    }
    bool addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx)
    {
        return addPlane(item, base, plane, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addPlane(item, base, plane, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlane(item, base, plane, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addPlane(item, base, plane, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlane(item, base, plane, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_addPlane(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_addPlane(item, base, plane, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane)
    {
        return begin_addPlane(item, base, plane, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx)
    {
        return begin_addPlane(item, base, plane, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlane(item, base, plane, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlane(item, base, plane, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addPlanePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlane(item, base, plane, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string& item, const ::std::string& base, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addPlanePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlane(item, base, plane, &__ctx, __del, __cookie);
    }

    bool end_addPlane(const ::Ice::AsyncResultPtr&);
    
private:

    bool addPlane(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlane(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo)
    {
        getAllNodeInformation(nodesInfo, 0);
    }
    void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo, const ::Ice::Context& __ctx)
    {
        getAllNodeInformation(nodesInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllNodeInformation(const ::IceInternal::Function<void (const ::RoboCompInnerModelManager::NodeInformationSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllNodeInformation(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllNodeInformation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllNodeInformation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllNodeInformation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompInnerModelManager::NodeInformationSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllNodeInformation(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllNodeInformation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllNodeInformation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllNodeInformation(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompInnerModelManager::NodeInformationSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompInnerModelManager::NodeInformationSequence&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                ::RoboCompInnerModelManager::NodeInformationSequence nodesInfo;
                try
                {
                    __proxy->end_getAllNodeInformation(nodesInfo, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(nodesInfo);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompInnerModelManager::NodeInformationSequence&)> _response;
        };
        return begin_getAllNodeInformation(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllNodeInformation()
    {
        return begin_getAllNodeInformation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllNodeInformation(const ::Ice::Context& __ctx)
    {
        return begin_getAllNodeInformation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllNodeInformation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllNodeInformation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllNodeInformation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllNodeInformation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllNodeInformation(const ::RoboCompInnerModelManager::Callback_InnerModelManager_getAllNodeInformationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllNodeInformation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllNodeInformation(const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getAllNodeInformationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllNodeInformation(&__ctx, __del, __cookie);
    }

    void end_getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& nodesInfo, const ::Ice::AsyncResultPtr&);
    
private:

    void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllNodeInformation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return setPose(base, item, pose, 0);
    }
    bool setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return setPose(base, item, pose, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPose(base, item, pose, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPose(base, item, pose, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPose(base, item, pose, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPose(base, item, pose, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setPose(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setPose(base, item, pose, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return begin_setPose(base, item, pose, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return begin_setPose(base, item, pose, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPose(base, item, pose, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPose(base, item, pose, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPose(base, item, pose, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPose(base, item, pose, &__ctx, __del, __cookie);
    }

    bool end_setPose(const ::Ice::AsyncResultPtr&);
    
private:

    bool setPose(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPose(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return setPoseFromParent(item, pose, 0);
    }
    bool setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return setPoseFromParent(item, pose, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPoseFromParent(item, pose, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPoseFromParent(item, pose, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPoseFromParent(item, pose, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPoseFromParent(item, pose, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setPoseFromParent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setPoseFromParent(item, pose, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return begin_setPoseFromParent(item, pose, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return begin_setPoseFromParent(item, pose, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPoseFromParent(item, pose, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPoseFromParent(item, pose, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPoseFromParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPoseFromParent(item, pose, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPoseFromParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPoseFromParent(item, pose, &__ctx, __del, __cookie);
    }

    bool end_setPoseFromParent(const ::Ice::AsyncResultPtr&);
    
private:

    bool setPoseFromParent(const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPoseFromParent(const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getPose(const ::std::string& base, const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return getPose(base, item, pose, 0);
    }
    bool getPose(const ::std::string& base, const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return getPose(base, item, pose, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPose(const ::std::string& base, const ::std::string& item, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPose(base, item, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPose(const ::std::string& base, const ::std::string& item, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPose(base, item, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPose(base, item, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPose(base, item, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                ::RoboCompInnerModelManager::Pose3D pose;
                bool __ret;
                try
                {
                    __ret = __proxy->end_getPose(pose, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, pose);
                }
            }
        
        private:
            
            ::std::function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)> _response;
        };
        return begin_getPose(base, item, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPose(const ::std::string& base, const ::std::string& item)
    {
        return begin_getPose(base, item, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx)
    {
        return begin_getPose(base, item, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPose(base, item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPose(base, item, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPose(base, item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPose(base, item, &__ctx, __del, __cookie);
    }

    bool end_getPose(::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::AsyncResultPtr&);
    
private:

    bool getPose(const ::std::string&, const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPose(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getPoseFromParent(const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose)
    {
        return getPoseFromParent(item, pose, 0);
    }
    bool getPoseFromParent(const ::std::string& item, ::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::Context& __ctx)
    {
        return getPoseFromParent(item, pose, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPoseFromParent(const ::std::string& item, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPoseFromParent(item, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPoseFromParent(const ::std::string& item, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPoseFromParent(item, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPoseFromParent(item, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPoseFromParent(item, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                ::RoboCompInnerModelManager::Pose3D pose;
                bool __ret;
                try
                {
                    __ret = __proxy->end_getPoseFromParent(pose, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, pose);
                }
            }
        
        private:
            
            ::std::function<void (bool, const ::RoboCompInnerModelManager::Pose3D&)> _response;
        };
        return begin_getPoseFromParent(item, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string& item)
    {
        return begin_getPoseFromParent(item, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context& __ctx)
    {
        return begin_getPoseFromParent(item, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string& item, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoseFromParent(item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoseFromParent(item, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string& item, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getPoseFromParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoseFromParent(item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string& item, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getPoseFromParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoseFromParent(item, &__ctx, __del, __cookie);
    }

    bool end_getPoseFromParent(::RoboCompInnerModelManager::Pose3D& pose, const ::Ice::AsyncResultPtr&);
    
private:

    bool getPoseFromParent(const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPoseFromParent(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane)
    {
        return setPlane(item, plane, 0);
    }
    bool setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx)
    {
        return setPlane(item, plane, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPlane(item, plane, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlane(item, plane, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPlane(item, plane, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlane(item, plane, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setPlane(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setPlane(item, plane, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane)
    {
        return begin_setPlane(item, plane, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx)
    {
        return begin_setPlane(item, plane, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlane(item, plane, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlane(item, plane, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPlanePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlane(item, plane, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string& item, const ::RoboCompInnerModelManager::Plane3D& plane, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPlanePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlane(item, plane, &__ctx, __del, __cookie);
    }

    bool end_setPlane(const ::Ice::AsyncResultPtr&);
    
private:

    bool setPlane(const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPlane(const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setPlaneTexture(const ::std::string& item, const ::std::string& texure)
    {
        return setPlaneTexture(item, texure, 0);
    }
    bool setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context& __ctx)
    {
        return setPlaneTexture(item, texure, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPlaneTexture(item, texure, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlaneTexture(item, texure, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPlaneTexture(item, texure, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlaneTexture(item, texure, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setPlaneTexture(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setPlaneTexture(item, texure, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure)
    {
        return begin_setPlaneTexture(item, texure, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context& __ctx)
    {
        return begin_setPlaneTexture(item, texure, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlaneTexture(item, texure, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlaneTexture(item, texure, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPlaneTexturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlaneTexture(item, texure, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string& item, const ::std::string& texure, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPlaneTexturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlaneTexture(item, texure, &__ctx, __del, __cookie);
    }

    bool end_setPlaneTexture(const ::Ice::AsyncResultPtr&);
    
private:

    bool setPlaneTexture(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPlaneTexture(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, ::RoboCompInnerModelManager::coord3D& coordInBase)
    {
        return transform(base, item, coordInItem, coordInBase, 0);
    }
    bool transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, ::RoboCompInnerModelManager::coord3D& coordInBase, const ::Ice::Context& __ctx)
    {
        return transform(base, item, coordInItem, coordInBase, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::coord3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transform(base, item, coordInItem, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transform(base, item, coordInItem, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::coord3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transform(base, item, coordInItem, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transform(base, item, coordInItem, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompInnerModelManager::coord3D&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, const ::RoboCompInnerModelManager::coord3D&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                ::RoboCompInnerModelManager::coord3D coordInBase;
                bool __ret;
                try
                {
                    __ret = __proxy->end_transform(coordInBase, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, coordInBase);
                }
            }
        
        private:
            
            ::std::function<void (bool, const ::RoboCompInnerModelManager::coord3D&)> _response;
        };
        return begin_transform(base, item, coordInItem, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem)
    {
        return begin_transform(base, item, coordInItem, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context& __ctx)
    {
        return begin_transform(base, item, coordInItem, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transform(base, item, coordInItem, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transform(base, item, coordInItem, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::RoboCompInnerModelManager::Callback_InnerModelManager_transformPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transform(base, item, coordInItem, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transform(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::coord3D& coordInItem, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_transformPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transform(base, item, coordInItem, &__ctx, __del, __cookie);
    }

    bool end_transform(::RoboCompInnerModelManager::coord3D& coordInBase, const ::Ice::AsyncResultPtr&);
    
private:

    bool transform(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::coord3D&, ::RoboCompInnerModelManager::coord3D&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_transform(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::coord3D&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string& base, const ::std::string& item)
    {
        return getTransformationMatrix(base, item, 0);
    }
    ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx)
    {
        return getTransformationMatrix(base, item, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::IceInternal::Function<void (const ::RoboCompInnerModelManager::Matrix&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTransformationMatrix(base, item, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTransformationMatrix(base, item, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompInnerModelManager::Matrix&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTransformationMatrix(base, item, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTransformationMatrix(base, item, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompInnerModelManager::Matrix&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompInnerModelManager::Matrix&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                ::RoboCompInnerModelManager::Matrix __ret;
                try
                {
                    __ret = __proxy->end_getTransformationMatrix(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompInnerModelManager::Matrix&)> _response;
        };
        return begin_getTransformationMatrix(base, item, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item)
    {
        return begin_getTransformationMatrix(base, item, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx)
    {
        return begin_getTransformationMatrix(base, item, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransformationMatrix(base, item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransformationMatrix(base, item, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getTransformationMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransformationMatrix(base, item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string& base, const ::std::string& item, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getTransformationMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransformationMatrix(base, item, &__ctx, __del, __cookie);
    }

    ::RoboCompInnerModelManager::Matrix end_getTransformationMatrix(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTransformationMatrix(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ)
    {
        return setScale(item, scaleX, scaleY, scaleZ, 0);
    }
    bool setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context& __ctx)
    {
        return setScale(item, scaleX, scaleY, scaleZ, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setScale(item, scaleX, scaleY, scaleZ, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setScale(item, scaleX, scaleY, scaleZ, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setScale(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setScale(item, scaleX, scaleY, scaleZ, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ)
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context& __ctx)
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::std::string& item, ::Ice::Float scaleX, ::Ice::Float scaleY, ::Ice::Float scaleZ, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(item, scaleX, scaleY, scaleZ, &__ctx, __del, __cookie);
    }

    bool end_setScale(const ::Ice::AsyncResultPtr&);
    
private:

    bool setScale(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setScale(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value)
    {
        return addAttribute(idNode, name, type, value, 0);
    }
    bool addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return addAttribute(idNode, name, type, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addAttribute(idNode, name, type, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAttribute(idNode, name, type, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addAttribute(idNode, name, type, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAttribute(idNode, name, type, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_addAttribute(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_addAttribute(idNode, name, type, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value)
    {
        return begin_addAttribute(idNode, name, type, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return begin_addAttribute(idNode, name, type, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAttribute(idNode, name, type, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAttribute(idNode, name, type, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAttribute(idNode, name, type, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_addAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAttribute(idNode, name, type, value, &__ctx, __del, __cookie);
    }

    bool end_addAttribute(const ::Ice::AsyncResultPtr&);
    
private:

    bool addAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool removeAttribute(const ::std::string& idNode, const ::std::string& name)
    {
        return removeAttribute(idNode, name, 0);
    }
    bool removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return removeAttribute(idNode, name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeAttribute(idNode, name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAttribute(idNode, name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeAttribute(idNode, name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAttribute(idNode, name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_removeAttribute(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_removeAttribute(idNode, name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string& idNode, const ::std::string& name)
    {
        return begin_removeAttribute(idNode, name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_removeAttribute(idNode, name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAttribute(idNode, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAttribute(idNode, name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::RoboCompInnerModelManager::Callback_InnerModelManager_removeAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAttribute(idNode, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_removeAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAttribute(idNode, name, &__ctx, __del, __cookie);
    }

    bool end_removeAttribute(const ::Ice::AsyncResultPtr&);
    
private:

    bool removeAttribute(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAttribute(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value)
    {
        return setAttribute(idNode, name, type, value, 0);
    }
    bool setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return setAttribute(idNode, name, type, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setAttribute(idNode, name, type, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAttribute(idNode, name, type, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setAttribute(idNode, name, type, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAttribute(idNode, name, type, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setAttribute(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setAttribute(idNode, name, type, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value)
    {
        return begin_setAttribute(idNode, name, type, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return begin_setAttribute(idNode, name, type, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAttribute(idNode, name, type, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAttribute(idNode, name, type, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAttribute(idNode, name, type, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string& idNode, const ::std::string& name, const ::std::string& type, const ::std::string& value, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAttribute(idNode, name, type, value, &__ctx, __del, __cookie);
    }

    bool end_setAttribute(const ::Ice::AsyncResultPtr&);
    
private:

    bool setAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getAttribute(const ::std::string& idNode, const ::std::string& name, ::std::string& type, ::std::string& value)
    {
        return getAttribute(idNode, name, type, value, 0);
    }
    bool getAttribute(const ::std::string& idNode, const ::std::string& name, ::std::string& type, ::std::string& value, const ::Ice::Context& __ctx)
    {
        return getAttribute(idNode, name, type, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAttribute(idNode, name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAttribute(idNode, name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAttribute(idNode, name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAttribute(idNode, name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, const ::std::string&, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                ::std::string type;
                ::std::string value;
                bool __ret;
                try
                {
                    __ret = __proxy->end_getAttribute(type, value, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, type, value);
                }
            }
        
        private:
            
            ::std::function<void (bool, const ::std::string&, const ::std::string&)> _response;
        };
        return begin_getAttribute(idNode, name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string& idNode, const ::std::string& name)
    {
        return begin_getAttribute(idNode, name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_getAttribute(idNode, name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAttribute(idNode, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAttribute(idNode, name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAttribute(idNode, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string& idNode, const ::std::string& name, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_getAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAttribute(idNode, name, &__ctx, __del, __cookie);
    }

    bool end_getAttribute(::std::string& type, ::std::string& value, const ::Ice::AsyncResultPtr&);
    
private:

    bool getAttribute(const ::std::string&, const ::std::string&, ::std::string&, ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAttribute(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool removeNode(const ::std::string& item)
    {
        return removeNode(item, 0);
    }
    bool removeNode(const ::std::string& item, const ::Ice::Context& __ctx)
    {
        return removeNode(item, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeNode(const ::std::string& item, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeNode(item, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeNode(const ::std::string& item, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeNode(item, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeNode(const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeNode(item, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeNode(const ::std::string& item, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeNode(item, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeNode(const ::std::string& item, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_removeNode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_removeNode(item, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string& item)
    {
        return begin_removeNode(item, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string& item, const ::Ice::Context& __ctx)
    {
        return begin_removeNode(item, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string& item, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNode(item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string& item, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNode(item, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string& item, const ::RoboCompInnerModelManager::Callback_InnerModelManager_removeNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNode(item, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string& item, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_removeNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNode(item, &__ctx, __del, __cookie);
    }

    bool end_removeNode(const ::Ice::AsyncResultPtr&);
    
private:

    bool removeNode(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeNode(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool moveNode(const ::std::string& src, const ::std::string& dst)
    {
        return moveNode(src, dst, 0);
    }
    bool moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context& __ctx)
    {
        return moveNode(src, dst, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_moveNode(src, dst, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_moveNode(src, dst, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_moveNode(src, dst, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_moveNode(src, dst, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_moveNode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_moveNode(src, dst, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string& src, const ::std::string& dst)
    {
        return begin_moveNode(src, dst, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context& __ctx)
    {
        return begin_moveNode(src, dst, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(src, dst, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(src, dst, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::RoboCompInnerModelManager::Callback_InnerModelManager_moveNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(src, dst, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string& src, const ::std::string& dst, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_moveNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(src, dst, &__ctx, __del, __cookie);
    }

    bool end_moveNode(const ::Ice::AsyncResultPtr&);
    
private:

    bool moveNode(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_moveNode(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool collide(const ::std::string& a, const ::std::string& b)
    {
        return collide(a, b, 0);
    }
    bool collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context& __ctx)
    {
        return collide(a, b, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_collide(const ::std::string& a, const ::std::string& b, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_collide(a, b, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_collide(const ::std::string& a, const ::std::string& b, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_collide(a, b, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_collide(a, b, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_collide(a, b, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_collide(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_collide(a, b, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_collide(const ::std::string& a, const ::std::string& b)
    {
        return begin_collide(a, b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context& __ctx)
    {
        return begin_collide(a, b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_collide(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_collide(a, b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_collide(const ::std::string& a, const ::std::string& b, const ::RoboCompInnerModelManager::Callback_InnerModelManager_collidePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_collide(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_collide(const ::std::string& a, const ::std::string& b, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_collidePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_collide(a, b, &__ctx, __del, __cookie);
    }

    bool end_collide(const ::Ice::AsyncResultPtr&);
    
private:

    bool collide(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_collide(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud)
    {
        setPointCloudData(id, cloud, 0);
    }
    void setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context& __ctx)
    {
        setPointCloudData(id, cloud, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPointCloudData(id, cloud, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPointCloudData(id, cloud, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPointCloudData(id, cloud, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPointCloudData(id, cloud, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud)
    {
        return begin_setPointCloudData(id, cloud, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context& __ctx)
    {
        return begin_setPointCloudData(id, cloud, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPointCloudData(id, cloud, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPointCloudData(id, cloud, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPointCloudDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPointCloudData(id, cloud, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string& id, const ::RoboCompInnerModelManager::PointCloudVector& cloud, const ::Ice::Context& __ctx, const ::RoboCompInnerModelManager::Callback_InnerModelManager_setPointCloudDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPointCloudData(id, cloud, &__ctx, __del, __cookie);
    }

    void end_setPointCloudData(const ::Ice::AsyncResultPtr&);
    
private:

    void setPointCloudData(const ::std::string&, const ::RoboCompInnerModelManager::PointCloudVector&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPointCloudData(const ::std::string&, const ::RoboCompInnerModelManager::PointCloudVector&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_twoway() const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_oneway() const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_batchOneway() const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_datagram() const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_batchDatagram() const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InnerModelManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InnerModelManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompInnerModelManager
{

class InnerModelManager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool addTransform(const ::std::string&, const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool addJoint(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::jointType&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool addMesh(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::meshType&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool addPlane(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setPose(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setPoseFromParent(const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getPose(const ::std::string&, const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getPoseFromParent(const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setPlane(const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setPlaneTexture(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool transform(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::coord3D&, ::RoboCompInnerModelManager::coord3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setScale(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool addAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool removeAttribute(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getAttribute(const ::std::string&, const ::std::string&, ::std::string&, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool removeNode(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool moveNode(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool collide(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPointCloudData(const ::std::string&, const ::RoboCompInnerModelManager::PointCloudVector&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompInnerModelManager
{

class InnerModelManager : virtual public ::IceDelegate::RoboCompInnerModelManager::InnerModelManager,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool addTransform(const ::std::string&, const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addJoint(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::jointType&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addMesh(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::meshType&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addPlane(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPose(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPoseFromParent(const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getPose(const ::std::string&, const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getPoseFromParent(const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPlane(const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPlaneTexture(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool transform(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::coord3D&, ::RoboCompInnerModelManager::coord3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setScale(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool removeAttribute(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getAttribute(const ::std::string&, const ::std::string&, ::std::string&, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool removeNode(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool moveNode(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool collide(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPointCloudData(const ::std::string&, const ::RoboCompInnerModelManager::PointCloudVector&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompInnerModelManager
{

class InnerModelManager : virtual public ::IceDelegate::RoboCompInnerModelManager::InnerModelManager,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool addTransform(const ::std::string&, const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addJoint(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::jointType&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addMesh(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::meshType&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addPlane(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPose(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPoseFromParent(const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getPose(const ::std::string&, const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getPoseFromParent(const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPlane(const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPlaneTexture(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool transform(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::coord3D&, ::RoboCompInnerModelManager::coord3D&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setScale(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool addAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool removeAttribute(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getAttribute(const ::std::string&, const ::std::string&, ::std::string&, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool removeNode(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool moveNode(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool collide(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPointCloudData(const ::std::string&, const ::RoboCompInnerModelManager::PointCloudVector&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompInnerModelManager
{

class InnerModelManager : virtual public ::Ice::Object
{
public:

    typedef InnerModelManagerPrx ProxyType;
    typedef InnerModelManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool addTransform(const ::std::string&, const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addTransform(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool addJoint(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::jointType&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addJoint(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool addMesh(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::meshType&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addMesh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool addPlane(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlane(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllNodeInformation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setPose(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setPoseFromParent(const ::std::string&, const ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPoseFromParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getPose(const ::std::string&, const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getPoseFromParent(const ::std::string&, ::RoboCompInnerModelManager::Pose3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPoseFromParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setPlane(const ::std::string&, const ::RoboCompInnerModelManager::Plane3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPlane(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setPlaneTexture(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPlaneTexture(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool transform(const ::std::string&, const ::std::string&, const ::RoboCompInnerModelManager::coord3D&, ::RoboCompInnerModelManager::coord3D&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___transform(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompInnerModelManager::Matrix getTransformationMatrix(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTransformationMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setScale(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setScale(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool addAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAttribute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool removeAttribute(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAttribute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAttribute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getAttribute(const ::std::string&, const ::std::string&, ::std::string&, ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAttribute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool removeNode(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool moveNode(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___moveNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool collide(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___collide(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPointCloudData(const ::std::string&, const ::RoboCompInnerModelManager::PointCloudVector&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPointCloudData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const InnerModelManager& l, const InnerModelManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InnerModelManager& l, const InnerModelManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompInnerModelManager
{

template<class T>
class CallbackNC_InnerModelManager_addTransform : public Callback_InnerModelManager_addTransform_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_addTransform(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addTransform(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_addTransformPtr
newCallback_InnerModelManager_addTransform(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addTransform<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_addTransformPtr
newCallback_InnerModelManager_addTransform(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addTransform<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_addTransform : public Callback_InnerModelManager_addTransform_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_addTransform(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addTransform(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_addTransformPtr
newCallback_InnerModelManager_addTransform(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addTransform<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_addTransformPtr
newCallback_InnerModelManager_addTransform(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addTransform<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_addJoint : public Callback_InnerModelManager_addJoint_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_addJoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addJoint(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_addJointPtr
newCallback_InnerModelManager_addJoint(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addJoint<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_addJointPtr
newCallback_InnerModelManager_addJoint(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addJoint<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_addJoint : public Callback_InnerModelManager_addJoint_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_addJoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addJoint(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_addJointPtr
newCallback_InnerModelManager_addJoint(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addJoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_addJointPtr
newCallback_InnerModelManager_addJoint(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addJoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_addMesh : public Callback_InnerModelManager_addMesh_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_addMesh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addMesh(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_addMeshPtr
newCallback_InnerModelManager_addMesh(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addMesh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_addMeshPtr
newCallback_InnerModelManager_addMesh(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addMesh<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_addMesh : public Callback_InnerModelManager_addMesh_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_addMesh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addMesh(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_addMeshPtr
newCallback_InnerModelManager_addMesh(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addMesh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_addMeshPtr
newCallback_InnerModelManager_addMesh(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addMesh<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_addPlane : public Callback_InnerModelManager_addPlane_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_addPlane(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addPlane(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_addPlanePtr
newCallback_InnerModelManager_addPlane(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addPlane<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_addPlanePtr
newCallback_InnerModelManager_addPlane(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addPlane<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_addPlane : public Callback_InnerModelManager_addPlane_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_addPlane(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addPlane(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_addPlanePtr
newCallback_InnerModelManager_addPlane(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addPlane<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_addPlanePtr
newCallback_InnerModelManager_addPlane(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addPlane<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_getAllNodeInformation : public Callback_InnerModelManager_getAllNodeInformation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompInnerModelManager::NodeInformationSequence&);

    CallbackNC_InnerModelManager_getAllNodeInformation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::NodeInformationSequence nodesInfo;
        try
        {
            __proxy->end_getAllNodeInformation(nodesInfo, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(nodesInfo);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_getAllNodeInformationPtr
newCallback_InnerModelManager_getAllNodeInformation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompInnerModelManager::NodeInformationSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getAllNodeInformation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_getAllNodeInformationPtr
newCallback_InnerModelManager_getAllNodeInformation(T* instance, void (T::*cb)(const ::RoboCompInnerModelManager::NodeInformationSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getAllNodeInformation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_getAllNodeInformation : public Callback_InnerModelManager_getAllNodeInformation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompInnerModelManager::NodeInformationSequence&, const CT&);

    Callback_InnerModelManager_getAllNodeInformation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::NodeInformationSequence nodesInfo;
        try
        {
            __proxy->end_getAllNodeInformation(nodesInfo, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(nodesInfo, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_getAllNodeInformationPtr
newCallback_InnerModelManager_getAllNodeInformation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompInnerModelManager::NodeInformationSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getAllNodeInformation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_getAllNodeInformationPtr
newCallback_InnerModelManager_getAllNodeInformation(T* instance, void (T::*cb)(const ::RoboCompInnerModelManager::NodeInformationSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getAllNodeInformation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setPose : public Callback_InnerModelManager_setPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_setPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPose(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_setPosePtr
newCallback_InnerModelManager_setPose(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPosePtr
newCallback_InnerModelManager_setPose(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setPose : public Callback_InnerModelManager_setPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_setPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPose(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_setPosePtr
newCallback_InnerModelManager_setPose(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPosePtr
newCallback_InnerModelManager_setPose(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setPoseFromParent : public Callback_InnerModelManager_setPoseFromParent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_setPoseFromParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPoseFromParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_setPoseFromParentPtr
newCallback_InnerModelManager_setPoseFromParent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPoseFromParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPoseFromParentPtr
newCallback_InnerModelManager_setPoseFromParent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPoseFromParent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setPoseFromParent : public Callback_InnerModelManager_setPoseFromParent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_setPoseFromParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPoseFromParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_setPoseFromParentPtr
newCallback_InnerModelManager_setPoseFromParent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPoseFromParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPoseFromParentPtr
newCallback_InnerModelManager_setPoseFromParent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPoseFromParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_getPose : public Callback_InnerModelManager_getPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompInnerModelManager::Pose3D&);

    CallbackNC_InnerModelManager_getPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::Pose3D pose;
        bool __ret;
        try
        {
            __ret = __proxy->end_getPose(pose, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, pose);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_getPosePtr
newCallback_InnerModelManager_getPose(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_getPosePtr
newCallback_InnerModelManager_getPose(T* instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getPose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_getPose : public Callback_InnerModelManager_getPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompInnerModelManager::Pose3D&, const CT&);

    Callback_InnerModelManager_getPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::Pose3D pose;
        bool __ret;
        try
        {
            __ret = __proxy->end_getPose(pose, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, pose, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_getPosePtr
newCallback_InnerModelManager_getPose(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_getPosePtr
newCallback_InnerModelManager_getPose(T* instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_getPoseFromParent : public Callback_InnerModelManager_getPoseFromParent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompInnerModelManager::Pose3D&);

    CallbackNC_InnerModelManager_getPoseFromParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::Pose3D pose;
        bool __ret;
        try
        {
            __ret = __proxy->end_getPoseFromParent(pose, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, pose);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_getPoseFromParentPtr
newCallback_InnerModelManager_getPoseFromParent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getPoseFromParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_getPoseFromParentPtr
newCallback_InnerModelManager_getPoseFromParent(T* instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getPoseFromParent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_getPoseFromParent : public Callback_InnerModelManager_getPoseFromParent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompInnerModelManager::Pose3D&, const CT&);

    Callback_InnerModelManager_getPoseFromParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::Pose3D pose;
        bool __ret;
        try
        {
            __ret = __proxy->end_getPoseFromParent(pose, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, pose, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_getPoseFromParentPtr
newCallback_InnerModelManager_getPoseFromParent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getPoseFromParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_getPoseFromParentPtr
newCallback_InnerModelManager_getPoseFromParent(T* instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::Pose3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getPoseFromParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setPlane : public Callback_InnerModelManager_setPlane_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_setPlane(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPlane(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_setPlanePtr
newCallback_InnerModelManager_setPlane(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPlane<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPlanePtr
newCallback_InnerModelManager_setPlane(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPlane<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setPlane : public Callback_InnerModelManager_setPlane_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_setPlane(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPlane(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_setPlanePtr
newCallback_InnerModelManager_setPlane(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPlane<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPlanePtr
newCallback_InnerModelManager_setPlane(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPlane<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setPlaneTexture : public Callback_InnerModelManager_setPlaneTexture_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_setPlaneTexture(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPlaneTexture(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_setPlaneTexturePtr
newCallback_InnerModelManager_setPlaneTexture(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPlaneTexture<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPlaneTexturePtr
newCallback_InnerModelManager_setPlaneTexture(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPlaneTexture<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setPlaneTexture : public Callback_InnerModelManager_setPlaneTexture_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_setPlaneTexture(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPlaneTexture(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_setPlaneTexturePtr
newCallback_InnerModelManager_setPlaneTexture(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPlaneTexture<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPlaneTexturePtr
newCallback_InnerModelManager_setPlaneTexture(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPlaneTexture<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_transform : public Callback_InnerModelManager_transform_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompInnerModelManager::coord3D&);

    CallbackNC_InnerModelManager_transform(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::coord3D coordInBase;
        bool __ret;
        try
        {
            __ret = __proxy->end_transform(coordInBase, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, coordInBase);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_transformPtr
newCallback_InnerModelManager_transform(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::coord3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_transform<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_transformPtr
newCallback_InnerModelManager_transform(T* instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::coord3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_transform<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_transform : public Callback_InnerModelManager_transform_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompInnerModelManager::coord3D&, const CT&);

    Callback_InnerModelManager_transform(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::coord3D coordInBase;
        bool __ret;
        try
        {
            __ret = __proxy->end_transform(coordInBase, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, coordInBase, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_transformPtr
newCallback_InnerModelManager_transform(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::coord3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_transform<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_transformPtr
newCallback_InnerModelManager_transform(T* instance, void (T::*cb)(bool, const ::RoboCompInnerModelManager::coord3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_transform<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_getTransformationMatrix : public Callback_InnerModelManager_getTransformationMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompInnerModelManager::Matrix&);

    CallbackNC_InnerModelManager_getTransformationMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::Matrix __ret;
        try
        {
            __ret = __proxy->end_getTransformationMatrix(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_getTransformationMatrixPtr
newCallback_InnerModelManager_getTransformationMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompInnerModelManager::Matrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getTransformationMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_getTransformationMatrixPtr
newCallback_InnerModelManager_getTransformationMatrix(T* instance, void (T::*cb)(const ::RoboCompInnerModelManager::Matrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getTransformationMatrix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_getTransformationMatrix : public Callback_InnerModelManager_getTransformationMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompInnerModelManager::Matrix&, const CT&);

    Callback_InnerModelManager_getTransformationMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInnerModelManager::Matrix __ret;
        try
        {
            __ret = __proxy->end_getTransformationMatrix(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_getTransformationMatrixPtr
newCallback_InnerModelManager_getTransformationMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompInnerModelManager::Matrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getTransformationMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_getTransformationMatrixPtr
newCallback_InnerModelManager_getTransformationMatrix(T* instance, void (T::*cb)(const ::RoboCompInnerModelManager::Matrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getTransformationMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setScale : public Callback_InnerModelManager_setScale_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_setScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setScale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_setScalePtr
newCallback_InnerModelManager_setScale(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setScale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setScalePtr
newCallback_InnerModelManager_setScale(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setScale<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setScale : public Callback_InnerModelManager_setScale_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_setScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setScale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_setScalePtr
newCallback_InnerModelManager_setScale(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setScalePtr
newCallback_InnerModelManager_setScale(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_addAttribute : public Callback_InnerModelManager_addAttribute_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_addAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_addAttributePtr
newCallback_InnerModelManager_addAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addAttribute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_addAttributePtr
newCallback_InnerModelManager_addAttribute(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_addAttribute<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_addAttribute : public Callback_InnerModelManager_addAttribute_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_addAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_addAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_addAttributePtr
newCallback_InnerModelManager_addAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_addAttributePtr
newCallback_InnerModelManager_addAttribute(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_addAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_removeAttribute : public Callback_InnerModelManager_removeAttribute_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_removeAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_removeAttributePtr
newCallback_InnerModelManager_removeAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_removeAttribute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_removeAttributePtr
newCallback_InnerModelManager_removeAttribute(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_removeAttribute<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_removeAttribute : public Callback_InnerModelManager_removeAttribute_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_removeAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_removeAttributePtr
newCallback_InnerModelManager_removeAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_removeAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_removeAttributePtr
newCallback_InnerModelManager_removeAttribute(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_removeAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setAttribute : public Callback_InnerModelManager_setAttribute_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_setAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_setAttributePtr
newCallback_InnerModelManager_setAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setAttribute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setAttributePtr
newCallback_InnerModelManager_setAttribute(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setAttribute<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setAttribute : public Callback_InnerModelManager_setAttribute_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_setAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_setAttributePtr
newCallback_InnerModelManager_setAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setAttributePtr
newCallback_InnerModelManager_setAttribute(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_getAttribute : public Callback_InnerModelManager_getAttribute_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&, const ::std::string&);

    CallbackNC_InnerModelManager_getAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::std::string type;
        ::std::string value;
        bool __ret;
        try
        {
            __ret = __proxy->end_getAttribute(type, value, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, type, value);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_getAttributePtr
newCallback_InnerModelManager_getAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getAttribute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_getAttributePtr
newCallback_InnerModelManager_getAttribute(T* instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_getAttribute<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_getAttribute : public Callback_InnerModelManager_getAttribute_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const ::std::string&, const CT&);

    Callback_InnerModelManager_getAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        ::std::string type;
        ::std::string value;
        bool __ret;
        try
        {
            __ret = __proxy->end_getAttribute(type, value, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, type, value, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_getAttributePtr
newCallback_InnerModelManager_getAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_getAttributePtr
newCallback_InnerModelManager_getAttribute(T* instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_getAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_removeNode : public Callback_InnerModelManager_removeNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_removeNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_removeNodePtr
newCallback_InnerModelManager_removeNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_removeNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_removeNodePtr
newCallback_InnerModelManager_removeNode(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_removeNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_removeNode : public Callback_InnerModelManager_removeNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_removeNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_removeNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_removeNodePtr
newCallback_InnerModelManager_removeNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_removeNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_removeNodePtr
newCallback_InnerModelManager_removeNode(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_removeNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_moveNode : public Callback_InnerModelManager_moveNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_moveNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_moveNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_moveNodePtr
newCallback_InnerModelManager_moveNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_moveNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_moveNodePtr
newCallback_InnerModelManager_moveNode(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_moveNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_moveNode : public Callback_InnerModelManager_moveNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_moveNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_moveNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_moveNodePtr
newCallback_InnerModelManager_moveNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_moveNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_moveNodePtr
newCallback_InnerModelManager_moveNode(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_moveNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_collide : public Callback_InnerModelManager_collide_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InnerModelManager_collide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_collide(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InnerModelManager_collidePtr
newCallback_InnerModelManager_collide(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_collide<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_collidePtr
newCallback_InnerModelManager_collide(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_collide<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_collide : public Callback_InnerModelManager_collide_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InnerModelManager_collide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInnerModelManager::InnerModelManagerPrx __proxy = ::RoboCompInnerModelManager::InnerModelManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_collide(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InnerModelManager_collidePtr
newCallback_InnerModelManager_collide(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_collide<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_collidePtr
newCallback_InnerModelManager_collide(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_collide<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InnerModelManager_setPointCloudData : public Callback_InnerModelManager_setPointCloudData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InnerModelManager_setPointCloudData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPointCloudData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPointCloudData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPointCloudData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InnerModelManager_setPointCloudData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InnerModelManager_setPointCloudData : public Callback_InnerModelManager_setPointCloudData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InnerModelManager_setPointCloudData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPointCloudData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPointCloudData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPointCloudData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InnerModelManager_setPointCloudDataPtr
newCallback_InnerModelManager_setPointCloudData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InnerModelManager_setPointCloudData<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
