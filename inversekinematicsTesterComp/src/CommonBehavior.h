// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CommonBehavior.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____CommonBehavior_h__
#define ____CommonBehavior_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompCommonBehavior
{

class CommonBehavior;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonBehavior::CommonBehavior>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCommonBehavior::CommonBehavior*);

}

}

namespace RoboCompCommonBehavior
{

class CommonBehavior;
bool operator==(const CommonBehavior&, const CommonBehavior&);
bool operator<(const CommonBehavior&, const CommonBehavior&);
::Ice::Object* upCast(::RoboCompCommonBehavior::CommonBehavior*);
typedef ::IceInternal::Handle< ::RoboCompCommonBehavior::CommonBehavior> CommonBehaviorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonBehavior::CommonBehavior> CommonBehaviorPrx;
void __patch(CommonBehaviorPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompCommonBehavior
{

enum State
{
    Starting,
    Running
};

struct Parameter
{
    bool editable;
    ::std::string value;
    ::std::string type;

    bool operator==(const Parameter& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(editable != __rhs.editable)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Parameter& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(editable < __rhs.editable)
        {
            return true;
        }
        else if(__rhs.editable < editable)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Parameter& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Parameter& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Parameter& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Parameter& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RoboCompCommonBehavior::Parameter> ParameterList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompCommonBehavior::State>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompCommonBehavior::Parameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompCommonBehavior::Parameter, S>
{
    static void write(S* __os, const ::RoboCompCommonBehavior::Parameter& v)
    {
        __os->write(v.editable);
        __os->write(v.value);
        __os->write(v.type);
    }
};

template<class S>
struct StreamReader< ::RoboCompCommonBehavior::Parameter, S>
{
    static void read(S* __is, ::RoboCompCommonBehavior::Parameter& v)
    {
        __is->read(v.editable);
        __is->read(v.value);
        __is->read(v.type);
    }
};

}

namespace RoboCompCommonBehavior
{

class Callback_CommonBehavior_getPeriod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_getPeriod_Base> Callback_CommonBehavior_getPeriodPtr;

class Callback_CommonBehavior_setPeriod_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_setPeriod_Base> Callback_CommonBehavior_setPeriodPtr;

class Callback_CommonBehavior_timeAwake_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_timeAwake_Base> Callback_CommonBehavior_timeAwakePtr;

class Callback_CommonBehavior_killYourSelf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_killYourSelf_Base> Callback_CommonBehavior_killYourSelfPtr;

class Callback_CommonBehavior_getParameterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_getParameterList_Base> Callback_CommonBehavior_getParameterListPtr;

class Callback_CommonBehavior_setParameterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_setParameterList_Base> Callback_CommonBehavior_setParameterListPtr;

class Callback_CommonBehavior_reloadConfig_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_reloadConfig_Base> Callback_CommonBehavior_reloadConfigPtr;

class Callback_CommonBehavior_getState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_getState_Base> Callback_CommonBehavior_getStatePtr;

}

namespace IceProxy
{

namespace RoboCompCommonBehavior
{

class CommonBehavior : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getPeriod()
    {
        return getPeriod(0);
    }
    ::Ice::Int getPeriod(const ::Ice::Context& __ctx)
    {
        return getPeriod(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPeriod(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPeriod(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPeriod(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPeriod(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPeriod(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPeriod(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPeriod(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPeriod(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPeriod(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getPeriod(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getPeriod(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPeriod()
    {
        return begin_getPeriod(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context& __ctx)
    {
        return begin_getPeriod(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPeriod(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPeriod(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::RoboCompCommonBehavior::Callback_CommonBehavior_getPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPeriod(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_getPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPeriod(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getPeriod(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getPeriod(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPeriod(::Ice::Int period)
    {
        setPeriod(period, 0);
    }
    void setPeriod(::Ice::Int period, const ::Ice::Context& __ctx)
    {
        setPeriod(period, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPeriod(::Ice::Int period, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPeriod(period, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPeriod(::Ice::Int period, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPeriod(period, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPeriod(::Ice::Int period, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPeriod(period, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPeriod(::Ice::Int period, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPeriod(period, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period)
    {
        return begin_setPeriod(period, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::Context& __ctx)
    {
        return begin_setPeriod(period, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPeriod(period, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPeriod(period, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPeriod(period, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setPeriodPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPeriod(period, &__ctx, __del, __cookie);
    }

    void end_setPeriod(const ::Ice::AsyncResultPtr&);
    
private:

    void setPeriod(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int timeAwake()
    {
        return timeAwake(0);
    }
    ::Ice::Int timeAwake(const ::Ice::Context& __ctx)
    {
        return timeAwake(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_timeAwake(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_timeAwake(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_timeAwake(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_timeAwake(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_timeAwake(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_timeAwake(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_timeAwake(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_timeAwake(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_timeAwake(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_timeAwake(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_timeAwake(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_timeAwake()
    {
        return begin_timeAwake(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context& __ctx)
    {
        return begin_timeAwake(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_timeAwake(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_timeAwake(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::RoboCompCommonBehavior::Callback_CommonBehavior_timeAwakePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_timeAwake(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_timeAwakePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_timeAwake(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_timeAwake(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int timeAwake(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void killYourSelf()
    {
        killYourSelf(0);
    }
    void killYourSelf(const ::Ice::Context& __ctx)
    {
        killYourSelf(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_killYourSelf(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_killYourSelf(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_killYourSelf(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_killYourSelf(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_killYourSelf(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_killYourSelf(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_killYourSelf(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_killYourSelf(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_killYourSelf()
    {
        return begin_killYourSelf(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context& __ctx)
    {
        return begin_killYourSelf(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killYourSelf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killYourSelf(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::RoboCompCommonBehavior::Callback_CommonBehavior_killYourSelfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killYourSelf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_killYourSelfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killYourSelf(&__ctx, __del, __cookie);
    }

    void end_killYourSelf(const ::Ice::AsyncResultPtr&);
    
private:

    void killYourSelf(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompCommonBehavior::ParameterList getParameterList()
    {
        return getParameterList(0);
    }
    ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Context& __ctx)
    {
        return getParameterList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getParameterList(const ::IceInternal::Function<void (const ::RoboCompCommonBehavior::ParameterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getParameterList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getParameterList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getParameterList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getParameterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonBehavior::ParameterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getParameterList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getParameterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getParameterList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getParameterList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonBehavior::ParameterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompCommonBehavior::ParameterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompCommonBehavior::ParameterList __ret;
                try
                {
                    __ret = __proxy->end_getParameterList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompCommonBehavior::ParameterList&)> _response;
        };
        return begin_getParameterList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getParameterList()
    {
        return begin_getParameterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context& __ctx)
    {
        return begin_getParameterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParameterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParameterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::RoboCompCommonBehavior::Callback_CommonBehavior_getParameterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParameterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_getParameterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParameterList(&__ctx, __del, __cookie);
    }

    ::RoboCompCommonBehavior::ParameterList end_getParameterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setParameterList(const ::RoboCompCommonBehavior::ParameterList& l)
    {
        setParameterList(l, 0);
    }
    void setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& __ctx)
    {
        setParameterList(l, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setParameterList(l, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setParameterList(l, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setParameterList(l, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setParameterList(l, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l)
    {
        return begin_setParameterList(l, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& __ctx)
    {
        return begin_setParameterList(l, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParameterList(l, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParameterList(l, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setParameterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParameterList(l, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setParameterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParameterList(l, &__ctx, __del, __cookie);
    }

    void end_setParameterList(const ::Ice::AsyncResultPtr&);
    
private:

    void setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadConfig()
    {
        reloadConfig(0);
    }
    void reloadConfig(const ::Ice::Context& __ctx)
    {
        reloadConfig(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadConfig(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadConfig(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadConfig(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadConfig(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadConfig(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadConfig(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadConfig(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadConfig(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadConfig()
    {
        return begin_reloadConfig(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context& __ctx)
    {
        return begin_reloadConfig(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfig(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfig(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::RoboCompCommonBehavior::Callback_CommonBehavior_reloadConfigPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfig(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_reloadConfigPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfig(&__ctx, __del, __cookie);
    }

    void end_reloadConfig(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadConfig(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompCommonBehavior::State getState()
    {
        return getState(0);
    }
    ::RoboCompCommonBehavior::State getState(const ::Ice::Context& __ctx)
    {
        return getState(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getState(const ::IceInternal::Function<void (::RoboCompCommonBehavior::State)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::RoboCompCommonBehavior::State)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::RoboCompCommonBehavior::State)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::RoboCompCommonBehavior::State)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompCommonBehavior::State __ret;
                try
                {
                    __ret = __proxy->end_getState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::RoboCompCommonBehavior::State)> _response;
        };
        return begin_getState(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getState()
    {
        return begin_getState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx)
    {
        return begin_getState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::RoboCompCommonBehavior::Callback_CommonBehavior_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx, const ::RoboCompCommonBehavior::Callback_CommonBehavior_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(&__ctx, __del, __cookie);
    }

    ::RoboCompCommonBehavior::State end_getState(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompCommonBehavior::State getState(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_secure(bool __secure) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_twoway() const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_oneway() const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_batchOneway() const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_datagram() const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_batchDatagram() const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_compress(bool __compress) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CommonBehavior> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CommonBehavior*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompCommonBehavior
{

class CommonBehavior : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getPeriod(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPeriod(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int timeAwake(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void killYourSelf(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadConfig(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompCommonBehavior::State getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompCommonBehavior
{

class CommonBehavior : virtual public ::IceDelegate::RoboCompCommonBehavior::CommonBehavior,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getPeriod(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPeriod(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int timeAwake(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void killYourSelf(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadConfig(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompCommonBehavior::State getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompCommonBehavior
{

class CommonBehavior : virtual public ::IceDelegate::RoboCompCommonBehavior::CommonBehavior,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getPeriod(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPeriod(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int timeAwake(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void killYourSelf(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadConfig(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompCommonBehavior::State getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompCommonBehavior
{

class CommonBehavior : virtual public ::Ice::Object
{
public:

    typedef CommonBehaviorPrx ProxyType;
    typedef CommonBehaviorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getPeriod(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPeriod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPeriod(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPeriod(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int timeAwake(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___timeAwake(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void killYourSelf(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___killYourSelf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getParameterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setParameterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadConfig(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadConfig(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCommonBehavior::State getState(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const CommonBehavior& l, const CommonBehavior& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CommonBehavior& l, const CommonBehavior& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompCommonBehavior
{

template<class T>
class CallbackNC_CommonBehavior_getPeriod : public Callback_CommonBehavior_getPeriod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CommonBehavior_getPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getPeriod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getPeriod<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_getPeriod : public Callback_CommonBehavior_getPeriod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CommonBehavior_getPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPeriod(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_setPeriod : public Callback_CommonBehavior_setPeriod_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_setPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_setPeriod : public Callback_CommonBehavior_setPeriod_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_setPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_timeAwake : public Callback_CommonBehavior_timeAwake_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CommonBehavior_timeAwake(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_timeAwake(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_timeAwake<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_timeAwake<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_timeAwake : public Callback_CommonBehavior_timeAwake_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CommonBehavior_timeAwake(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_timeAwake(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_timeAwake<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_timeAwake<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_killYourSelf : public Callback_CommonBehavior_killYourSelf_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_killYourSelf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_killYourSelf : public Callback_CommonBehavior_killYourSelf_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_killYourSelf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_getParameterList : public Callback_CommonBehavior_getParameterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCommonBehavior::ParameterList&);

    CallbackNC_CommonBehavior_getParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonBehavior::ParameterList __ret;
        try
        {
            __ret = __proxy->end_getParameterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonBehavior::ParameterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getParameterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(T* instance, void (T::*cb)(const ::RoboCompCommonBehavior::ParameterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getParameterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_getParameterList : public Callback_CommonBehavior_getParameterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCommonBehavior::ParameterList&, const CT&);

    Callback_CommonBehavior_getParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonBehavior::ParameterList __ret;
        try
        {
            __ret = __proxy->end_getParameterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonBehavior::ParameterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getParameterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(T* instance, void (T::*cb)(const ::RoboCompCommonBehavior::ParameterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getParameterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_setParameterList : public Callback_CommonBehavior_setParameterList_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_setParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_setParameterList : public Callback_CommonBehavior_setParameterList_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_setParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_reloadConfig : public Callback_CommonBehavior_reloadConfig_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_reloadConfig(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_reloadConfig : public Callback_CommonBehavior_reloadConfig_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_reloadConfig(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonBehavior_getState : public Callback_CommonBehavior_getState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::RoboCompCommonBehavior::State);

    CallbackNC_CommonBehavior_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonBehavior::State __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompCommonBehavior::State), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(T* instance, void (T::*cb)(::RoboCompCommonBehavior::State), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonBehavior_getState : public Callback_CommonBehavior_getState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::RoboCompCommonBehavior::State, const CT&);

    Callback_CommonBehavior_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonBehavior::State __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompCommonBehavior::State, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(T* instance, void (T::*cb)(::RoboCompCommonBehavior::State, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getState<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
