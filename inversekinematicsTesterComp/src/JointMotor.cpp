// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `JointMotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <JointMotor.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompJointMotor__JointMotor__setPosition_name = "setPosition";

const ::std::string __RoboCompJointMotor__JointMotor__setVelocity_name = "setVelocity";

const ::std::string __RoboCompJointMotor__JointMotor__setZeroPos_name = "setZeroPos";

const ::std::string __RoboCompJointMotor__JointMotor__setSyncPosition_name = "setSyncPosition";

const ::std::string __RoboCompJointMotor__JointMotor__setSyncVelocity_name = "setSyncVelocity";

const ::std::string __RoboCompJointMotor__JointMotor__setSyncZeroPos_name = "setSyncZeroPos";

const ::std::string __RoboCompJointMotor__JointMotor__getMotorParams_name = "getMotorParams";

const ::std::string __RoboCompJointMotor__JointMotor__getMotorState_name = "getMotorState";

const ::std::string __RoboCompJointMotor__JointMotor__getMotorStateMap_name = "getMotorStateMap";

const ::std::string __RoboCompJointMotor__JointMotor__getAllMotorState_name = "getAllMotorState";

const ::std::string __RoboCompJointMotor__JointMotor__getAllMotorParams_name = "getAllMotorParams";

const ::std::string __RoboCompJointMotor__JointMotor__getBusParams_name = "getBusParams";

}

namespace
{

const char* __RoboCompJointMotor__HardwareFailedException_name = "RoboCompJointMotor::HardwareFailedException";

struct __F__RoboCompJointMotor__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompJointMotor::HardwareFailedException();
    }
};

class __F__RoboCompJointMotor__HardwareFailedException__Init
{
public:

    __F__RoboCompJointMotor__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompJointMotor::HardwareFailedException", new __F__RoboCompJointMotor__HardwareFailedException);
    }

    ~__F__RoboCompJointMotor__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompJointMotor::HardwareFailedException");
    }
};

const __F__RoboCompJointMotor__HardwareFailedException__Init __F__RoboCompJointMotor__HardwareFailedException__i;

}

RoboCompJointMotor::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompJointMotor::HardwareFailedException::ice_name() const
{
    return __RoboCompJointMotor__HardwareFailedException_name;
}

RoboCompJointMotor::HardwareFailedException*
RoboCompJointMotor::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompJointMotor::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompJointMotor__OutOfRangeException_name = "RoboCompJointMotor::OutOfRangeException";

struct __F__RoboCompJointMotor__OutOfRangeException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompJointMotor::OutOfRangeException();
    }
};

class __F__RoboCompJointMotor__OutOfRangeException__Init
{
public:

    __F__RoboCompJointMotor__OutOfRangeException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompJointMotor::OutOfRangeException", new __F__RoboCompJointMotor__OutOfRangeException);
    }

    ~__F__RoboCompJointMotor__OutOfRangeException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompJointMotor::OutOfRangeException");
    }
};

const __F__RoboCompJointMotor__OutOfRangeException__Init __F__RoboCompJointMotor__OutOfRangeException__i;

}

RoboCompJointMotor::OutOfRangeException::OutOfRangeException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::OutOfRangeException::~OutOfRangeException() throw()
{
}

::std::string
RoboCompJointMotor::OutOfRangeException::ice_name() const
{
    return __RoboCompJointMotor__OutOfRangeException_name;
}

RoboCompJointMotor::OutOfRangeException*
RoboCompJointMotor::OutOfRangeException::ice_clone() const
{
    return new OutOfRangeException(*this);
}

void
RoboCompJointMotor::OutOfRangeException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::OutOfRangeException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::OutOfRangeException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::OutOfRangeException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompJointMotor__UnknownMotorException_name = "RoboCompJointMotor::UnknownMotorException";

struct __F__RoboCompJointMotor__UnknownMotorException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompJointMotor::UnknownMotorException();
    }
};

class __F__RoboCompJointMotor__UnknownMotorException__Init
{
public:

    __F__RoboCompJointMotor__UnknownMotorException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompJointMotor::UnknownMotorException", new __F__RoboCompJointMotor__UnknownMotorException);
    }

    ~__F__RoboCompJointMotor__UnknownMotorException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompJointMotor::UnknownMotorException");
    }
};

const __F__RoboCompJointMotor__UnknownMotorException__Init __F__RoboCompJointMotor__UnknownMotorException__i;

}

RoboCompJointMotor::UnknownMotorException::UnknownMotorException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::UnknownMotorException::~UnknownMotorException() throw()
{
}

::std::string
RoboCompJointMotor::UnknownMotorException::ice_name() const
{
    return __RoboCompJointMotor__UnknownMotorException_name;
}

RoboCompJointMotor::UnknownMotorException*
RoboCompJointMotor::UnknownMotorException::ice_clone() const
{
    return new UnknownMotorException(*this);
}

void
RoboCompJointMotor::UnknownMotorException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::UnknownMotorException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::UnknownMotorException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::UnknownMotorException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompJointMotor::upCast(::IceProxy::RoboCompJointMotor::JointMotor* p) { return p; }

void
::IceProxy::RoboCompJointMotor::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompJointMotor::JointMotor;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__setPosition_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setPosition_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->setPosition(goal, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setPosition_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setPosition_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__setPosition_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(goal);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setPosition(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setPosition_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__setVelocity_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setVelocity_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->setVelocity(goal, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setVelocity_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setVelocity_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__setVelocity_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(goal);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setVelocity(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setVelocity_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setZeroPos(const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__setZeroPos_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setZeroPos_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->setZeroPos(name, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setZeroPos(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setZeroPos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setZeroPos_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__setZeroPos_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setZeroPos(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setZeroPos_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__setSyncPosition_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncPosition_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->setSyncPosition(listGoals, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncPosition_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setSyncPosition_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__setSyncPosition_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(listGoals);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncPosition(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setSyncPosition_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__setSyncVelocity_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncVelocity_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->setSyncVelocity(listGoals, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncVelocity_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setSyncVelocity_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__setSyncVelocity_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(listGoals);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncVelocity(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setSyncVelocity_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setSyncZeroPos(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncZeroPos_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->setSyncZeroPos(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setSyncZeroPos(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncZeroPos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__setSyncZeroPos_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncZeroPos(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompJointMotor::MotorParams
IceProxy::RoboCompJointMotor::JointMotor::getMotorParams(const ::std::string& motor, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__getMotorParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            return __del->getMotorParams(motor, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getMotorParams(const ::std::string& motor, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getMotorParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__getMotorParams_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(motor);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompJointMotor::MotorParams
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getMotorParams_name);
    ::RoboCompJointMotor::MotorParams __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompJointMotor::MotorState
IceProxy::RoboCompJointMotor::JointMotor::getMotorState(const ::std::string& motor, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__getMotorState_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorState_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            return __del->getMotorState(motor, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getMotorState(const ::std::string& motor, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getMotorState_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__getMotorState_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(motor);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompJointMotor::MotorState
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorState(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getMotorState_name);
    ::RoboCompJointMotor::MotorState __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompJointMotor::MotorStateMap
IceProxy::RoboCompJointMotor::JointMotor::getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__getMotorStateMap_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorStateMap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            return __del->getMotorStateMap(mList, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorStateMap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getMotorStateMap_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__getMotorStateMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(mList);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompJointMotor::MotorStateMap
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorStateMap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getMotorStateMap_name);
    ::RoboCompJointMotor::MotorStateMap __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__getAllMotorState_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorState_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            __del->getAllMotorState(mstateMap, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getAllMotorState(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getAllMotorState_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__getAllMotorState_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getAllMotorState_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(mstateMap);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompJointMotor::MotorParamsList
IceProxy::RoboCompJointMotor::JointMotor::getAllMotorParams(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__getAllMotorParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            return __del->getAllMotorParams(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getAllMotorParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getAllMotorParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__getAllMotorParams_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompJointMotor::MotorParamsList
IceProxy::RoboCompJointMotor::JointMotor::end_getAllMotorParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getAllMotorParams_name);
    ::RoboCompJointMotor::MotorParamsList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompJointMotor::BusParams
IceProxy::RoboCompJointMotor::JointMotor::getBusParams(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompJointMotor__JointMotor__getBusParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getBusParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompJointMotor::JointMotor* __del = dynamic_cast< ::IceDelegate::RoboCompJointMotor::JointMotor*>(__delBase.get());
            return __del->getBusParams(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getBusParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getBusParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getBusParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompJointMotor__JointMotor__getBusParams_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompJointMotor::BusParams
IceProxy::RoboCompJointMotor::JointMotor::end_getBusParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getBusParams_name);
    ::RoboCompJointMotor::BusParams __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RoboCompJointMotor::JointMotor::ice_staticId()
{
    return ::RoboCompJointMotor::JointMotor::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompJointMotor::JointMotor::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompJointMotor::JointMotor);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompJointMotor::JointMotor::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompJointMotor::JointMotor);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompJointMotor::JointMotor::__newInstance() const
{
    return new JointMotor;
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__setPosition_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(goal);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__setVelocity_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(goal);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::setZeroPos(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__setZeroPos_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__setSyncPosition_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(listGoals);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__setSyncVelocity_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(listGoals);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::setSyncZeroPos(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__setSyncZeroPos_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompJointMotor::MotorParams
IceDelegateM::RoboCompJointMotor::JointMotor::getMotorParams(const ::std::string& motor, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__getMotorParams_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(motor);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompJointMotor::MotorParams __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompJointMotor::MotorState
IceDelegateM::RoboCompJointMotor::JointMotor::getMotorState(const ::std::string& motor, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__getMotorState_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(motor);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompJointMotor::MotorState __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompJointMotor::MotorStateMap
IceDelegateM::RoboCompJointMotor::JointMotor::getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__getMotorStateMap_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(mList);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompJointMotor::MotorStateMap __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompJointMotor::JointMotor::getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__getAllMotorState_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(mstateMap);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompJointMotor::MotorParamsList
IceDelegateM::RoboCompJointMotor::JointMotor::getAllMotorParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__getAllMotorParams_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompJointMotor::MotorParamsList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompJointMotor::BusParams
IceDelegateM::RoboCompJointMotor::JointMotor::getBusParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompJointMotor__JointMotor__getBusParams_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompJointMotor::BusParams __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompJointMotor::MotorGoalPosition& __p_goal, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_goal(__p_goal)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setPosition(_m_goal, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompJointMotor::MotorGoalPosition& _m_goal;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__setPosition_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(goal, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompJointMotor::MotorGoalVelocity& __p_goal, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_goal(__p_goal)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setVelocity(_m_goal, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompJointMotor::MotorGoalVelocity& _m_goal;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__setVelocity_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(goal, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::setZeroPos(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setZeroPos(_m_name, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__setZeroPos_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_listGoals(__p_listGoals)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setSyncPosition(_m_listGoals, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompJointMotor::MotorGoalPositionList& _m_listGoals;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__setSyncPosition_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(listGoals, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompJointMotor::MotorGoalVelocityList& __p_listGoals, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_listGoals(__p_listGoals)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setSyncVelocity(_m_listGoals, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompJointMotor::MotorGoalVelocityList& _m_listGoals;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__setSyncVelocity_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(listGoals, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::setSyncZeroPos(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setSyncZeroPos(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::RoboCompJointMotor::MotorParams
IceDelegateD::RoboCompJointMotor::JointMotor::getMotorParams(const ::std::string& motor, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompJointMotor::MotorParams& __result, const ::std::string& __p_motor, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_motor(__p_motor)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getMotorParams(_m_motor, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompJointMotor::MotorParams& _result;
        const ::std::string& _m_motor;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__getMotorParams_name, ::Ice::Normal, __context);
    ::RoboCompJointMotor::MotorParams __result;
    try
    {
        _DirectI __direct(__result, motor, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompJointMotor::MotorState
IceDelegateD::RoboCompJointMotor::JointMotor::getMotorState(const ::std::string& motor, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompJointMotor::MotorState& __result, const ::std::string& __p_motor, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_motor(__p_motor)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getMotorState(_m_motor, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompJointMotor::MotorState& _result;
        const ::std::string& _m_motor;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__getMotorState_name, ::Ice::Normal, __context);
    ::RoboCompJointMotor::MotorState __result;
    try
    {
        _DirectI __direct(__result, motor, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompJointMotor::MotorStateMap
IceDelegateD::RoboCompJointMotor::JointMotor::getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompJointMotor::MotorStateMap& __result, const ::RoboCompJointMotor::MotorList& __p_mList, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mList(__p_mList)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getMotorStateMap(_m_mList, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompJointMotor::MotorStateMap& _result;
        const ::RoboCompJointMotor::MotorList& _m_mList;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__getMotorStateMap_name, ::Ice::Normal, __context);
    ::RoboCompJointMotor::MotorStateMap __result;
    try
    {
        _DirectI __direct(__result, mList, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompJointMotor::JointMotor::getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompJointMotor::MotorStateMap& __p_mstateMap, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_mstateMap(__p_mstateMap)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getAllMotorState(_m_mstateMap, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompJointMotor::MotorStateMap& _m_mstateMap;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__getAllMotorState_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(mstateMap, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::RoboCompJointMotor::MotorParamsList
IceDelegateD::RoboCompJointMotor::JointMotor::getAllMotorParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompJointMotor::MotorParamsList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getAllMotorParams(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompJointMotor::MotorParamsList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__getAllMotorParams_name, ::Ice::Normal, __context);
    ::RoboCompJointMotor::MotorParamsList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompJointMotor::BusParams
IceDelegateD::RoboCompJointMotor::JointMotor::getBusParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompJointMotor::BusParams& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompJointMotor::JointMotor* servant = dynamic_cast< ::RoboCompJointMotor::JointMotor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getBusParams(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompJointMotor::BusParams& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompJointMotor__JointMotor__getBusParams_name, ::Ice::Normal, __context);
    ::RoboCompJointMotor::BusParams __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* RoboCompJointMotor::upCast(::RoboCompJointMotor::JointMotor* p) { return p; }

namespace
{
const ::std::string __RoboCompJointMotor__JointMotor_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotor"
};

}

bool
RoboCompJointMotor::JointMotor::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompJointMotor__JointMotor_ids, __RoboCompJointMotor__JointMotor_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompJointMotor::JointMotor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompJointMotor__JointMotor_ids[0], &__RoboCompJointMotor__JointMotor_ids[2]);
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_id(const ::Ice::Current&) const
{
    return __RoboCompJointMotor__JointMotor_ids[1];
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_staticId()
{
    return __RoboCompJointMotor__JointMotor_ids[1];
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPosition goal;
    __is->read(goal);
    __inS.endReadParams();
    try
    {
        setPosition(goal, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setVelocity(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocity goal;
    __is->read(goal);
    __inS.endReadParams();
    try
    {
        setVelocity(goal, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setZeroPos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    try
    {
        setZeroPos(name, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setSyncPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList listGoals;
    __is->read(listGoals);
    __inS.endReadParams();
    try
    {
        setSyncPosition(listGoals, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setSyncVelocity(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocityList listGoals;
    __is->read(listGoals);
    __inS.endReadParams();
    try
    {
        setSyncVelocity(listGoals, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setSyncZeroPos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        setSyncZeroPos(__current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getMotorParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string motor;
    __is->read(motor);
    __inS.endReadParams();
    try
    {
        ::RoboCompJointMotor::MotorParams __ret = getMotorParams(motor, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getMotorState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string motor;
    __is->read(motor);
    __inS.endReadParams();
    try
    {
        ::RoboCompJointMotor::MotorState __ret = getMotorState(motor, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getMotorStateMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorList mList;
    __is->read(mList);
    __inS.endReadParams();
    try
    {
        ::RoboCompJointMotor::MotorStateMap __ret = getMotorStateMap(mList, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getAllMotorState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompJointMotor::MotorStateMap mstateMap;
    try
    {
        getAllMotorState(mstateMap, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(mstateMap);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getAllMotorParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompJointMotor::MotorParamsList __ret = getAllMotorParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getBusParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompJointMotor::BusParams __ret = getBusParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompJointMotor__JointMotor_all[] =
{
    "getAllMotorParams",
    "getAllMotorState",
    "getBusParams",
    "getMotorParams",
    "getMotorState",
    "getMotorStateMap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPosition",
    "setSyncPosition",
    "setSyncVelocity",
    "setSyncZeroPos",
    "setVelocity",
    "setZeroPos"
};

}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompJointMotor__JointMotor_all, __RoboCompJointMotor__JointMotor_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompJointMotor__JointMotor_all)
    {
        case 0:
        {
            return ___getAllMotorParams(in, current);
        }
        case 1:
        {
            return ___getAllMotorState(in, current);
        }
        case 2:
        {
            return ___getBusParams(in, current);
        }
        case 3:
        {
            return ___getMotorParams(in, current);
        }
        case 4:
        {
            return ___getMotorState(in, current);
        }
        case 5:
        {
            return ___getMotorStateMap(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___setPosition(in, current);
        }
        case 11:
        {
            return ___setSyncPosition(in, current);
        }
        case 12:
        {
            return ___setSyncVelocity(in, current);
        }
        case 13:
        {
            return ___setSyncZeroPos(in, current);
        }
        case 14:
        {
            return ___setVelocity(in, current);
        }
        case 15:
        {
            return ___setZeroPos(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompJointMotor::JointMotor::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::JointMotor::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompJointMotor::__patch(JointMotorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompJointMotor::JointMotorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompJointMotor::JointMotor::ice_staticId(), v);
    }
}
