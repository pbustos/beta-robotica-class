// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `JointMotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____JointMotor_h__
#define ____JointMotor_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompJointMotor
{

class JointMotor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompJointMotor::JointMotor*);

}

}

namespace RoboCompJointMotor
{

class JointMotor;
bool operator==(const JointMotor&, const JointMotor&);
bool operator<(const JointMotor&, const JointMotor&);
::Ice::Object* upCast(::RoboCompJointMotor::JointMotor*);
typedef ::IceInternal::Handle< ::RoboCompJointMotor::JointMotor> JointMotorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor> JointMotorPrx;
void __patch(JointMotorPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompJointMotor
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_name() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static HardwareFailedException __HardwareFailedException_init;

class OutOfRangeException : public ::Ice::UserException
{
public:

    OutOfRangeException() {}
    explicit OutOfRangeException(const ::std::string&);
    virtual ~OutOfRangeException() throw();

    virtual ::std::string ice_name() const;
    virtual OutOfRangeException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class UnknownMotorException : public ::Ice::UserException
{
public:

    UnknownMotorException() {}
    explicit UnknownMotorException(const ::std::string&);
    virtual ~UnknownMotorException() throw();

    virtual ::std::string ice_name() const;
    virtual UnknownMotorException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

struct MotorState
{
    ::Ice::Int p;
    ::Ice::Int v;
    ::Ice::Int temperature;
    bool isMoving;
    ::Ice::Float pos;
    ::Ice::Float vel;
    ::Ice::Float power;
    ::std::string timeStamp;
};

typedef ::std::map< ::std::string, ::RoboCompJointMotor::MotorState> MotorStateMap;

struct MotorParams
{
    bool invertedSign;
    ::Ice::Byte busId;
    ::Ice::Float minPos;
    ::Ice::Float maxPos;
    ::Ice::Float maxVelocity;
    ::Ice::Float zeroPos;
    ::Ice::Float stepsRange;
    ::Ice::Float maxDegrees;
    ::std::string name;
    ::Ice::Float offset;
    ::Ice::Float unitsRange;
};

typedef ::std::vector< ::RoboCompJointMotor::MotorParams> MotorParamsList;

struct BusParams
{
    ::Ice::Int numMotors;
    ::Ice::Int baudRate;
    ::Ice::Int basicPeriod;
    ::std::string handler;
    ::std::string device;

    bool operator==(const BusParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(numMotors != __rhs.numMotors)
        {
            return false;
        }
        if(baudRate != __rhs.baudRate)
        {
            return false;
        }
        if(basicPeriod != __rhs.basicPeriod)
        {
            return false;
        }
        if(handler != __rhs.handler)
        {
            return false;
        }
        if(device != __rhs.device)
        {
            return false;
        }
        return true;
    }

    bool operator<(const BusParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(numMotors < __rhs.numMotors)
        {
            return true;
        }
        else if(__rhs.numMotors < numMotors)
        {
            return false;
        }
        if(baudRate < __rhs.baudRate)
        {
            return true;
        }
        else if(__rhs.baudRate < baudRate)
        {
            return false;
        }
        if(basicPeriod < __rhs.basicPeriod)
        {
            return true;
        }
        else if(__rhs.basicPeriod < basicPeriod)
        {
            return false;
        }
        if(handler < __rhs.handler)
        {
            return true;
        }
        else if(__rhs.handler < handler)
        {
            return false;
        }
        if(device < __rhs.device)
        {
            return true;
        }
        else if(__rhs.device < device)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const BusParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const BusParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const BusParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const BusParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct MotorGoalPosition
{
    ::Ice::Float position;
    ::Ice::Float maxSpeed;
    ::std::string name;
};

typedef ::std::vector< ::RoboCompJointMotor::MotorGoalPosition> MotorGoalPositionList;

struct MotorGoalVelocity
{
    ::Ice::Float velocity;
    ::Ice::Float maxAcc;
    ::std::string name;
};

typedef ::std::vector< ::RoboCompJointMotor::MotorGoalVelocity> MotorGoalVelocityList;

typedef ::std::vector< ::std::string> MotorList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompJointMotor::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::OutOfRangeException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::UnknownMotorException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJointMotor::MotorState, S>
{
    static void write(S* __os, const ::RoboCompJointMotor::MotorState& v)
    {
        __os->write(v.p);
        __os->write(v.v);
        __os->write(v.temperature);
        __os->write(v.isMoving);
        __os->write(v.pos);
        __os->write(v.vel);
        __os->write(v.power);
        __os->write(v.timeStamp);
    }
};

template<class S>
struct StreamReader< ::RoboCompJointMotor::MotorState, S>
{
    static void read(S* __is, ::RoboCompJointMotor::MotorState& v)
    {
        __is->read(v.p);
        __is->read(v.v);
        __is->read(v.temperature);
        __is->read(v.isMoving);
        __is->read(v.pos);
        __is->read(v.vel);
        __is->read(v.power);
        __is->read(v.timeStamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJointMotor::MotorParams, S>
{
    static void write(S* __os, const ::RoboCompJointMotor::MotorParams& v)
    {
        __os->write(v.invertedSign);
        __os->write(v.busId);
        __os->write(v.minPos);
        __os->write(v.maxPos);
        __os->write(v.maxVelocity);
        __os->write(v.zeroPos);
        __os->write(v.stepsRange);
        __os->write(v.maxDegrees);
        __os->write(v.name);
        __os->write(v.offset);
        __os->write(v.unitsRange);
    }
};

template<class S>
struct StreamReader< ::RoboCompJointMotor::MotorParams, S>
{
    static void read(S* __is, ::RoboCompJointMotor::MotorParams& v)
    {
        __is->read(v.invertedSign);
        __is->read(v.busId);
        __is->read(v.minPos);
        __is->read(v.maxPos);
        __is->read(v.maxVelocity);
        __is->read(v.zeroPos);
        __is->read(v.stepsRange);
        __is->read(v.maxDegrees);
        __is->read(v.name);
        __is->read(v.offset);
        __is->read(v.unitsRange);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::BusParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJointMotor::BusParams, S>
{
    static void write(S* __os, const ::RoboCompJointMotor::BusParams& v)
    {
        __os->write(v.numMotors);
        __os->write(v.baudRate);
        __os->write(v.basicPeriod);
        __os->write(v.handler);
        __os->write(v.device);
    }
};

template<class S>
struct StreamReader< ::RoboCompJointMotor::BusParams, S>
{
    static void read(S* __is, ::RoboCompJointMotor::BusParams& v)
    {
        __is->read(v.numMotors);
        __is->read(v.baudRate);
        __is->read(v.basicPeriod);
        __is->read(v.handler);
        __is->read(v.device);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorGoalPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJointMotor::MotorGoalPosition, S>
{
    static void write(S* __os, const ::RoboCompJointMotor::MotorGoalPosition& v)
    {
        __os->write(v.position);
        __os->write(v.maxSpeed);
        __os->write(v.name);
    }
};

template<class S>
struct StreamReader< ::RoboCompJointMotor::MotorGoalPosition, S>
{
    static void read(S* __is, ::RoboCompJointMotor::MotorGoalPosition& v)
    {
        __is->read(v.position);
        __is->read(v.maxSpeed);
        __is->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorGoalVelocity>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJointMotor::MotorGoalVelocity, S>
{
    static void write(S* __os, const ::RoboCompJointMotor::MotorGoalVelocity& v)
    {
        __os->write(v.velocity);
        __os->write(v.maxAcc);
        __os->write(v.name);
    }
};

template<class S>
struct StreamReader< ::RoboCompJointMotor::MotorGoalVelocity, S>
{
    static void read(S* __is, ::RoboCompJointMotor::MotorGoalVelocity& v)
    {
        __is->read(v.velocity);
        __is->read(v.maxAcc);
        __is->read(v.name);
    }
};

}

namespace RoboCompJointMotor
{

class Callback_JointMotor_setPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setPosition_Base> Callback_JointMotor_setPositionPtr;

class Callback_JointMotor_setVelocity_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setVelocity_Base> Callback_JointMotor_setVelocityPtr;

class Callback_JointMotor_setZeroPos_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setZeroPos_Base> Callback_JointMotor_setZeroPosPtr;

class Callback_JointMotor_setSyncPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setSyncPosition_Base> Callback_JointMotor_setSyncPositionPtr;

class Callback_JointMotor_setSyncVelocity_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setSyncVelocity_Base> Callback_JointMotor_setSyncVelocityPtr;

class Callback_JointMotor_setSyncZeroPos_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setSyncZeroPos_Base> Callback_JointMotor_setSyncZeroPosPtr;

class Callback_JointMotor_getMotorParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getMotorParams_Base> Callback_JointMotor_getMotorParamsPtr;

class Callback_JointMotor_getMotorState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getMotorState_Base> Callback_JointMotor_getMotorStatePtr;

class Callback_JointMotor_getMotorStateMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getMotorStateMap_Base> Callback_JointMotor_getMotorStateMapPtr;

class Callback_JointMotor_getAllMotorState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getAllMotorState_Base> Callback_JointMotor_getAllMotorStatePtr;

class Callback_JointMotor_getAllMotorParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getAllMotorParams_Base> Callback_JointMotor_getAllMotorParamsPtr;

class Callback_JointMotor_getBusParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getBusParams_Base> Callback_JointMotor_getBusParamsPtr;

}

namespace IceProxy
{

namespace RoboCompJointMotor
{

class JointMotor : virtual public ::IceProxy::Ice::Object
{
public:

    void setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal)
    {
        setPosition(goal, 0);
    }
    void setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context& __ctx)
    {
        setPosition(goal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPosition(goal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPosition(goal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPosition(goal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPosition(goal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setPosition(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setPosition(goal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal)
    {
        return begin_setPosition(goal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context& __ctx)
    {
        return begin_setPosition(goal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosition(goal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosition(goal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::RoboCompJointMotor::Callback_JointMotor_setPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosition(goal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& goal, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_setPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosition(goal, &__ctx, __del, __cookie);
    }

    void end_setPosition(const ::Ice::AsyncResultPtr&);
    
private:

    void setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal)
    {
        setVelocity(goal, 0);
    }
    void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context& __ctx)
    {
        setVelocity(goal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setVelocity(goal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVelocity(goal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setVelocity(goal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVelocity(goal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setVelocity(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setVelocity(goal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal)
    {
        return begin_setVelocity(goal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context& __ctx)
    {
        return begin_setVelocity(goal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVelocity(goal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVelocity(goal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::RoboCompJointMotor::Callback_JointMotor_setVelocityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVelocity(goal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& goal, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_setVelocityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVelocity(goal, &__ctx, __del, __cookie);
    }

    void end_setVelocity(const ::Ice::AsyncResultPtr&);
    
private:

    void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setZeroPos(const ::std::string& name)
    {
        setZeroPos(name, 0);
    }
    void setZeroPos(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        setZeroPos(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setZeroPos(const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setZeroPos(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setZeroPos(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setZeroPos(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setZeroPos(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setZeroPos(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setZeroPos(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setZeroPos(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setZeroPos(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setZeroPos(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setZeroPos(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name)
    {
        return begin_setZeroPos(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_setZeroPos(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZeroPos(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZeroPos(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::RoboCompJointMotor::Callback_JointMotor_setZeroPosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZeroPos(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& name, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_setZeroPosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZeroPos(name, &__ctx, __del, __cookie);
    }

    void end_setZeroPos(const ::Ice::AsyncResultPtr&);
    
private:

    void setZeroPos(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals)
    {
        setSyncPosition(listGoals, 0);
    }
    void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& __ctx)
    {
        setSyncPosition(listGoals, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSyncPosition(listGoals, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSyncPosition(listGoals, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSyncPosition(listGoals, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSyncPosition(listGoals, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setSyncPosition(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setSyncPosition(listGoals, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals)
    {
        return begin_setSyncPosition(listGoals, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& __ctx)
    {
        return begin_setSyncPosition(listGoals, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncPosition(listGoals, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncPosition(listGoals, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::RoboCompJointMotor::Callback_JointMotor_setSyncPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncPosition(listGoals, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_setSyncPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncPosition(listGoals, &__ctx, __del, __cookie);
    }

    void end_setSyncPosition(const ::Ice::AsyncResultPtr&);
    
private:

    void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals)
    {
        setSyncVelocity(listGoals, 0);
    }
    void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context& __ctx)
    {
        setSyncVelocity(listGoals, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSyncVelocity(listGoals, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSyncVelocity(listGoals, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSyncVelocity(listGoals, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSyncVelocity(listGoals, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setSyncVelocity(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setSyncVelocity(listGoals, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals)
    {
        return begin_setSyncVelocity(listGoals, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context& __ctx)
    {
        return begin_setSyncVelocity(listGoals, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncVelocity(listGoals, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncVelocity(listGoals, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::RoboCompJointMotor::Callback_JointMotor_setSyncVelocityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncVelocity(listGoals, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& listGoals, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_setSyncVelocityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncVelocity(listGoals, &__ctx, __del, __cookie);
    }

    void end_setSyncVelocity(const ::Ice::AsyncResultPtr&);
    
private:

    void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSyncZeroPos()
    {
        setSyncZeroPos(0);
    }
    void setSyncZeroPos(const ::Ice::Context& __ctx)
    {
        setSyncZeroPos(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSyncZeroPos(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSyncZeroPos(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncZeroPos(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSyncZeroPos(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncZeroPos(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSyncZeroPos(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSyncZeroPos(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSyncZeroPos(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSyncZeroPos(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setSyncZeroPos(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setSyncZeroPos(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSyncZeroPos()
    {
        return begin_setSyncZeroPos(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context& __ctx)
    {
        return begin_setSyncZeroPos(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncZeroPos(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncZeroPos(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::RoboCompJointMotor::Callback_JointMotor_setSyncZeroPosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncZeroPos(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_setSyncZeroPosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSyncZeroPos(&__ctx, __del, __cookie);
    }

    void end_setSyncZeroPos(const ::Ice::AsyncResultPtr&);
    
private:

    void setSyncZeroPos(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string& motor)
    {
        return getMotorParams(motor, 0);
    }
    ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string& motor, const ::Ice::Context& __ctx)
    {
        return getMotorParams(motor, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMotorParams(const ::std::string& motor, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMotorParams(motor, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorParams(const ::std::string& motor, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMotorParams(motor, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMotorParams(motor, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMotorParams(motor, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMotorParams(const ::std::string& motor, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompJointMotor::MotorParams __ret;
                try
                {
                    __ret = __proxy->end_getMotorParams(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompJointMotor::MotorParams&)> _response;
        };
        return begin_getMotorParams(motor, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor)
    {
        return begin_getMotorParams(motor, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& __ctx)
    {
        return begin_getMotorParams(motor, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorParams(motor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorParams(motor, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::RoboCompJointMotor::Callback_JointMotor_getMotorParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorParams(motor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& motor, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_getMotorParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorParams(motor, &__ctx, __del, __cookie);
    }

    ::RoboCompJointMotor::MotorParams end_getMotorParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompJointMotor::MotorState getMotorState(const ::std::string& motor)
    {
        return getMotorState(motor, 0);
    }
    ::RoboCompJointMotor::MotorState getMotorState(const ::std::string& motor, const ::Ice::Context& __ctx)
    {
        return getMotorState(motor, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMotorState(const ::std::string& motor, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMotorState(motor, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorState(const ::std::string& motor, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMotorState(motor, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorState(const ::std::string& motor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMotorState(motor, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorState(const ::std::string& motor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMotorState(motor, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMotorState(const ::std::string& motor, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompJointMotor::MotorState __ret;
                try
                {
                    __ret = __proxy->end_getMotorState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompJointMotor::MotorState&)> _response;
        };
        return begin_getMotorState(motor, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor)
    {
        return begin_getMotorState(motor, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::Context& __ctx)
    {
        return begin_getMotorState(motor, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorState(motor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorState(motor, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorState(motor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& motor, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorState(motor, &__ctx, __del, __cookie);
    }

    ::RoboCompJointMotor::MotorState end_getMotorState(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompJointMotor::MotorState getMotorState(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList)
    {
        return getMotorStateMap(mList, 0);
    }
    ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context& __ctx)
    {
        return getMotorStateMap(mList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMotorStateMap(mList, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMotorStateMap(mList, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMotorStateMap(mList, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMotorStateMap(mList, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompJointMotor::MotorStateMap __ret;
                try
                {
                    __ret = __proxy->end_getMotorStateMap(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)> _response;
        };
        return begin_getMotorStateMap(mList, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList)
    {
        return begin_getMotorStateMap(mList, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context& __ctx)
    {
        return begin_getMotorStateMap(mList, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorStateMap(mList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorStateMap(mList, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStateMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorStateMap(mList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& mList, const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStateMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMotorStateMap(mList, &__ctx, __del, __cookie);
    }

    ::RoboCompJointMotor::MotorStateMap end_getMotorStateMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap)
    {
        getAllMotorState(mstateMap, 0);
    }
    void getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap, const ::Ice::Context& __ctx)
    {
        getAllMotorState(mstateMap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllMotorState(const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllMotorState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMotorState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllMotorState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMotorState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllMotorState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMotorState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllMotorState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllMotorState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompJointMotor::MotorStateMap mstateMap;
                try
                {
                    __proxy->end_getAllMotorState(mstateMap, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(mstateMap);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)> _response;
        };
        return begin_getAllMotorState(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllMotorState()
    {
        return begin_getAllMotorState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context& __ctx)
    {
        return begin_getAllMotorState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorState(&__ctx, __del, __cookie);
    }

    void end_getAllMotorState(::RoboCompJointMotor::MotorStateMap& mstateMap, const ::Ice::AsyncResultPtr&);
    
private:

    void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompJointMotor::MotorParamsList getAllMotorParams()
    {
        return getAllMotorParams(0);
    }
    ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context& __ctx)
    {
        return getAllMotorParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllMotorParams(const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParamsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllMotorParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMotorParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllMotorParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMotorParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParamsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllMotorParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllMotorParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllMotorParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllMotorParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParamsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorParamsList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompJointMotor::MotorParamsList __ret;
                try
                {
                    __ret = __proxy->end_getAllMotorParams(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompJointMotor::MotorParamsList&)> _response;
        };
        return begin_getAllMotorParams(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllMotorParams()
    {
        return begin_getAllMotorParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context& __ctx)
    {
        return begin_getAllMotorParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllMotorParams(&__ctx, __del, __cookie);
    }

    ::RoboCompJointMotor::MotorParamsList end_getAllMotorParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompJointMotor::BusParams getBusParams()
    {
        return getBusParams(0);
    }
    ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context& __ctx)
    {
        return getBusParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBusParams(const ::IceInternal::Function<void (const ::RoboCompJointMotor::BusParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBusParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBusParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBusParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBusParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::BusParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBusParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBusParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBusParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBusParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::BusParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::BusParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompJointMotor::BusParams __ret;
                try
                {
                    __ret = __proxy->end_getBusParams(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompJointMotor::BusParams&)> _response;
        };
        return begin_getBusParams(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBusParams()
    {
        return begin_getBusParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& __ctx)
    {
        return begin_getBusParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBusParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBusParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::RoboCompJointMotor::Callback_JointMotor_getBusParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBusParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& __ctx, const ::RoboCompJointMotor::Callback_JointMotor_getBusParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBusParams(&__ctx, __del, __cookie);
    }

    ::RoboCompJointMotor::BusParams end_getBusParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<JointMotor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_secure(bool __secure) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_twoway() const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_oneway() const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_batchOneway() const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_datagram() const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_batchDatagram() const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_compress(bool __compress) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JointMotor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<JointMotor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompJointMotor
{

class JointMotor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setZeroPos(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSyncZeroPos(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompJointMotor::MotorState getMotorState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompJointMotor
{

class JointMotor : virtual public ::IceDelegate::RoboCompJointMotor::JointMotor,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setZeroPos(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSyncZeroPos(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorState getMotorState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompJointMotor
{

class JointMotor : virtual public ::IceDelegate::RoboCompJointMotor::JointMotor,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setZeroPos(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSyncZeroPos(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorState getMotorState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompJointMotor
{

class JointMotor : virtual public ::Ice::Object
{
public:

    typedef JointMotorPrx ProxyType;
    typedef JointMotorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVelocity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setZeroPos(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSyncPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSyncVelocity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncZeroPos(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSyncZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorState getMotorState(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMotorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMotorStateMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllMotorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBusParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const JointMotor& l, const JointMotor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const JointMotor& l, const JointMotor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompJointMotor
{

template<class T>
class CallbackNC_JointMotor_setPosition : public Callback_JointMotor_setPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setPosition : public Callback_JointMotor_setPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setVelocity : public Callback_JointMotor_setVelocity_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setVelocity(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setVelocity : public Callback_JointMotor_setVelocity_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setVelocity(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setZeroPos : public Callback_JointMotor_setZeroPos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setZeroPos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setZeroPos : public Callback_JointMotor_setZeroPos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setZeroPos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setSyncPosition : public Callback_JointMotor_setSyncPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setSyncPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSyncPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setSyncPosition : public Callback_JointMotor_setSyncPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setSyncPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSyncPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setSyncVelocity : public Callback_JointMotor_setSyncVelocity_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setSyncVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSyncVelocity(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setSyncVelocity : public Callback_JointMotor_setSyncVelocity_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setSyncVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSyncVelocity(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setSyncZeroPos : public Callback_JointMotor_setSyncZeroPos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setSyncZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSyncZeroPos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setSyncZeroPos : public Callback_JointMotor_setSyncZeroPos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setSyncZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSyncZeroPos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getMotorParams : public Callback_JointMotor_getMotorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParams&);

    CallbackNC_JointMotor_getMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorParams __ret;
        try
        {
            __ret = __proxy->end_getMotorParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getMotorParams : public Callback_JointMotor_getMotorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParams&, const CT&);

    Callback_JointMotor_getMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorParams __ret;
        try
        {
            __ret = __proxy->end_getMotorParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getMotorState : public Callback_JointMotor_getMotorState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorState&);

    CallbackNC_JointMotor_getMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorState __ret;
        try
        {
            __ret = __proxy->end_getMotorState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getMotorState : public Callback_JointMotor_getMotorState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorState&, const CT&);

    Callback_JointMotor_getMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorState __ret;
        try
        {
            __ret = __proxy->end_getMotorState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getMotorStateMap : public Callback_JointMotor_getMotorStateMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&);

    CallbackNC_JointMotor_getMotorStateMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorStateMap __ret;
        try
        {
            __ret = __proxy->end_getMotorStateMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorStateMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorStateMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getMotorStateMap : public Callback_JointMotor_getMotorStateMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&, const CT&);

    Callback_JointMotor_getMotorStateMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorStateMap __ret;
        try
        {
            __ret = __proxy->end_getMotorStateMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorStateMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorStateMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getAllMotorState : public Callback_JointMotor_getAllMotorState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&);

    CallbackNC_JointMotor_getAllMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorStateMap mstateMap;
        try
        {
            __proxy->end_getAllMotorState(mstateMap, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(mstateMap);
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getAllMotorState : public Callback_JointMotor_getAllMotorState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&, const CT&);

    Callback_JointMotor_getAllMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorStateMap mstateMap;
        try
        {
            __proxy->end_getAllMotorState(mstateMap, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(mstateMap, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getAllMotorParams : public Callback_JointMotor_getAllMotorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParamsList&);

    CallbackNC_JointMotor_getAllMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorParamsList __ret;
        try
        {
            __ret = __proxy->end_getAllMotorParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getAllMotorParams : public Callback_JointMotor_getAllMotorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParamsList&, const CT&);

    Callback_JointMotor_getAllMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::MotorParamsList __ret;
        try
        {
            __ret = __proxy->end_getAllMotorParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getBusParams : public Callback_JointMotor_getBusParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::BusParams&);

    CallbackNC_JointMotor_getBusParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::BusParams __ret;
        try
        {
            __ret = __proxy->end_getBusParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getBusParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getBusParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getBusParams : public Callback_JointMotor_getBusParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::BusParams&, const CT&);

    Callback_JointMotor_getBusParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompJointMotor::BusParams __ret;
        try
        {
            __ret = __proxy->end_getBusParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getBusParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getBusParams<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
